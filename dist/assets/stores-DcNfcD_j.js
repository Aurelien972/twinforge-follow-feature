const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/page-fridge-BvAjnJpI.js","assets/vendor-DX97-qL9.js","assets/utils-CUtLAp28.js","assets/supabase-C_rF2iqf.js","assets/page-fridge-scan-ZLPWYd6x.js","assets/ui-components-DWjWyKd7.js","assets/motion-DLE-fuXv.js","assets/ui-components-BfdLI5ID.css","assets/page-fridge-scan-DAz6gEg3.css","assets/date-utils-sCOX3Ksr.js"])))=>i.map(i=>d[i]);
import{p as q,c as K,n as z}from"./utils-CUtLAp28.js";import{l as a,s as y,p as ie}from"./page-fridge-BvAjnJpI.js";import{_ as w}from"./page-fridge-scan-ZLPWYd6x.js";import{d as R}from"./vendor-DX97-qL9.js";const U=[{title:"Initialisation de la Forge Nutritionnelle",subtitle:"Préparation de votre plan personnalisé",message:"Analyse de votre profil nutritionnel...",duration:3e3,progressStart:0,progressEnd:15},{title:"Analyse des Préférences",subtitle:"Optimisation selon vos goûts",message:"Traitement de vos préférences alimentaires...",duration:2500,progressStart:15,progressEnd:30},{title:"Génération Intelligente",subtitle:"Création de recettes personnalisées",message:"Génération des repas avec IA...",duration:4e3,progressStart:30,progressEnd:60},{title:"Optimisation Nutritionnelle",subtitle:"Équilibrage des macronutriments",message:"Calcul des valeurs nutritionnelles...",duration:2e3,progressStart:60,progressEnd:80},{title:"Finalisation",subtitle:"Derniers ajustements",message:"Finalisation de votre plan hebdomadaire...",duration:1500,progressStart:80,progressEnd:95}],me="twinforge:meal-plan-store";function de(t,n){let e;n?e=new Date(n):(e=new Date,e.setHours(0,0,0,0));const r=new Date(e);return r.setDate(e.getDate()+(t-1)*7),r.setHours(0,0,0,0),r}const Se=(t,n)=>({formatted:`${t.toLocaleDateString("fr-FR",{day:"numeric",month:"short"})} - ${n.toLocaleDateString("fr-FR",{day:"numeric",month:"short"})}`,startDate:t.toISOString(),endDate:n.toISOString()});function L(t,n=0){if(typeof t=="number"&&Number.isFinite(t))return t;if(typeof t=="string"){const e=t.match(/-?\d+(?:[.,]\d+)?/);return e?Number(e[0].replace(",",".")):n}return n}function B(t){console.log("🔍 [transformEdgeMealToFrontendMealDetail] Raw edgeMeal:",t);const n=(t?.mealName??t?.title??t?.meal??"Repas sans nom").toString(),e=(t?.descriptionSummary??t?.description??"").toString();!t?.mealName&&!t?.title&&!t?.meal&&console.warn("⚠️ [transformEdgeMealToFrontendMealDetail] Meal missing name fields:",t);const r=L(t?.prep_time_min??t?.prepTimeMin,0),s=L(t?.cook_time_min??t?.cookTimeMin,0),o=L(t?.calories_est??t?.estimatedCalories??t?.calories,0);console.log("🔍 [transformEdgeMealToFrontendMealDetail] Processed values:",{estimatedPrepTime:r,estimatedCookTime:s,estimatedCalories:o});const l=Array.isArray(t?.ingredients)?t.ingredients:Array.isArray(t?.mainIngredients)?t.mainIngredients:[],i=Array.isArray(t?.dietaryTags)?t.dietaryTags:[],c=Array.isArray(t?.mealComponents)?t.mealComponents:[];return{mealName:n,descriptionSummary:e,mainIngredients:l,estimatedPrepTime:r,estimatedCookTime:s,estimatedCalories:o,nutritionalOverview:{kcal:o,protein:L(t?.protein,0),carbs:L(t?.carbs,0),fat:L(t?.fat,0)},mealComponents:c,dietaryTags:i,recipeId:t?.recipeId,isDetailedRecipeGenerated:!1,detailedRecipe:void 0,status:"ready"}}function fe(t){console.log("🔍 [transformEdgeDayToFrontendDay] Raw dayData:",t);const e=new Date(t.date).toLocaleDateString("fr-FR",{weekday:"long"}),r={};t.breakfast&&(r.breakfast=B(t.breakfast)),t.lunch&&(r.lunch=B(t.lunch)),t.dinner&&(r.dinner=B(t.dinner)),t.snack&&(r.snack=B(t.snack));const s=[r.breakfast,r.lunch,r.dinner,r.snack].filter(Boolean),o=s.reduce((c,u)=>c+L(u.estimatedPrepTime,0),0),l=s.reduce((c,u)=>c+L(u.estimatedCookTime,0),0),i=L(t.total_calories,s.reduce((c,u)=>c+L(u.estimatedCalories,0),0));return console.log("🔍 [transformEdgeDayToFrontendDay] Calculated totals:",{prepTime:o,cookTime:l,totalCalories:i}),{date:t.date,dayName:e.charAt(0).toUpperCase()+e.slice(1),meals:r,prepTime:o,cookTime:l,totalCalories:i,daily_summary:t.daily_summary,isBatchCookingDay:t.isBatchCookingDay||!1,status:"ready"}}const Ie=(t,n)=>({startProgressSimulation:()=>{const e=n();e.progressIntervalId&&clearInterval(e.progressIntervalId),e.progressTimeoutId&&clearTimeout(e.progressTimeoutId);const r=Date.now();let s=0;const o=()=>{const c=Date.now(),u=n();if(c-u.lastBackendProgressUpdate<2e3&&u.lastBackendProgressUpdate>0)return;if(s>=U.length){t({generationProgress:95,currentLoadingTitle:"Finalisation",currentLoadingSubtitle:"Derniers ajustements",loadingMessage:"Finalisation de votre plan hebdomadaire..."});return}const g=U[s],p=r+U.slice(0,s).reduce((S,h)=>S+h.duration,0),d=c-p;if(d>=g.duration){if(s++,s<U.length){const S=U[s];t({simulatedStepIndex:s,generationProgress:S.progressStart,currentLoadingTitle:S.title,currentLoadingSubtitle:S.subtitle,loadingMessage:S.message})}}else{const S=d/g.duration,h=g.progressStart+(g.progressEnd-g.progressStart)*S;t({generationProgress:Math.min(h,g.progressEnd),currentLoadingTitle:g.title,currentLoadingSubtitle:g.subtitle,loadingMessage:g.message})}},l=U[0];t({simulatedStepIndex:0,simulatedProgressStartTime:r,lastBackendProgressUpdate:0,generationProgress:l.progressStart,currentLoadingTitle:l.title,currentLoadingSubtitle:l.subtitle,loadingMessage:l.message});const i=setInterval(o,100);t({progressIntervalId:i}),a.info("MEAL_PLAN_STORE","Progress simulation started",{stepsCount:U.length,timestamp:new Date().toISOString()})},stopProgressSimulation:()=>{const e=n();e.progressIntervalId&&clearInterval(e.progressIntervalId),e.progressTimeoutId&&clearTimeout(e.progressTimeoutId),t({progressIntervalId:null,progressTimeoutId:null,simulatedStepIndex:0,lastBackendProgressUpdate:0,simulatedProgressStartTime:0,simulatedProgressCurrentStepDuration:0,simulatedProgressCurrentStepStartValue:0,simulatedProgressCurrentStepEndValue:0}),a.info("MEAL_PLAN_STORE","Progress simulation stopped",{timestamp:new Date().toISOString()})}}),_e=(t,n)=>({loadAvailableInventories:async()=>{try{const{data:{user:e}}=await y.auth.getUser();if(!e)return;a.info("MEAL_PLAN_STORE","Loading available inventories",{userId:e.id,timestamp:new Date().toISOString()});const{data:r,error:s}=await y.from("recipe_sessions").select("id, created_at, inventory_final, status").eq("user_id",e.id).not("inventory_final","is",null).order("created_at",{ascending:!1});if(a.debug("MEAL_PLAN_STORE","Raw Supabase response for recipe_sessions",{userId:e.id,data:r?r.map(c=>({id:c.id,created_at:c.created_at,inventory_final_length:c.inventory_final?.length,status:c.status})):null,error:s?.message,timestamp:new Date().toISOString()}),a.debug("MEAL_PLAN_STORE","Raw data from Supabase before filtering",{userId:e.id,totalSessions:r?.length||0,sessions:r?r.map(c=>({id:c.id,created_at:c.created_at,inventory_final_type:Array.isArray(c.inventory_final)?"array":typeof c.inventory_final,inventory_final_length:c.inventory_final?.length||0,status:c.status})):[],timestamp:new Date().toISOString()}),s)throw new Error(`Failed to load inventories: ${s.message}`);const o=(r||[]).filter(c=>c.inventory_final&&Array.isArray(c.inventory_final)&&c.inventory_final.length>0);a.debug("MEAL_PLAN_STORE","Filtered valid inventories",{userId:e.id,validInventoriesCount:o.length,validInventoriesIds:o.map(c=>c.id),timestamp:new Date().toISOString()}),a.debug("MEAL_PLAN_STORE","Valid inventories after filtering",{userId:e.id,validInventoriesCount:o.length,validInventories:o.map(c=>({id:c.id,created_at:c.created_at,inventory_final_length:c.inventory_final?.length||0,status:c.status})),timestamp:new Date().toISOString()}),t({availableInventories:o});const l=n().selectedInventoryId;o.length>0?l&&o.some(u=>u.id===l)?a.debug("MEAL_PLAN_STORE","Current selected inventory is valid",{userId:e.id,currentSelectedId:l,timestamp:new Date().toISOString()}):(a.info("MEAL_PLAN_STORE","No valid selected inventory found, defaulting to first available",{userId:e.id,currentSelectedId:l,defaultingTo:o[0].id,timestamp:new Date().toISOString()}),t({selectedInventoryId:o[0].id})):l!==null?(a.info("MEAL_PLAN_STORE","No inventories available, clearing selected inventory",{userId:e.id,currentSelectedId:l,timestamp:new Date().toISOString()}),t({selectedInventoryId:null})):a.debug("MEAL_PLAN_STORE","No inventories available and selected inventory already null",{userId:e.id,timestamp:new Date().toISOString()});const i=n().selectedInventoryId;o.length>0&&!i&&(a.info("MEAL_PLAN_STORE","Force selecting first available inventory",{userId:e.id,forcedSelectionId:o[0].id,timestamp:new Date().toISOString()}),t({selectedInventoryId:o[0].id})),a.info("MEAL_PLAN_STORE","Available inventories loaded",{inventoriesCount:o.length,selectedInventoryId:n().selectedInventoryId,timestamp:new Date().toISOString()})}catch(e){a.error("MEAL_PLAN_STORE","Failed to load available inventories",{error:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()})}},selectInventory:e=>{t({selectedInventoryId:e}),a.info("MEAL_PLAN_STORE","Inventory selected",{inventoryId:e,timestamp:new Date().toISOString()})}});function J(t){return new Blob([t]).size}function Y(){const t=[];let n=0;try{for(let o=0;o<localStorage.length;o++){const l=localStorage.key(o);if(l){const i=localStorage.getItem(l)||"",c=J(l+i);t.push({key:l,size:c}),n+=c}}}catch(o){a.error("STORAGE_MANAGER","Failed to calculate storage stats",{error:o instanceof Error?o.message:String(o)})}t.sort((o,l)=>l.size-o.size);const e=10*1024*1024,r=e-n,s=n/e*100;return{used:n,available:Math.max(0,r),percentage:s,items:t}}function oe(t="STORAGE_USAGE"){const n=Y();a.info(t,"Storage usage",{usedMB:(n.used/(1024*1024)).toFixed(2),availableMB:(n.available/(1024*1024)).toFixed(2),percentage:n.percentage.toFixed(1),itemCount:n.items.length,largestItems:n.items.slice(0,5).map(e=>({key:e.key,sizeMB:(e.size/(1024*1024)).toFixed(2)}))})}function he(){let t=0;try{const n=[];for(let e=0;e<localStorage.length;e++){const r=localStorage.key(e);if(r&&r.startsWith("REACT_QUERY_")){const s=localStorage.getItem(r)||"";t+=J(r+s),n.push(r)}}n.forEach(e=>localStorage.removeItem(e)),a.info("STORAGE_CLEANUP","React Query cache cleaned",{keysRemoved:n.length,spaceFreesMB:(t/(1024*1024)).toFixed(2)})}catch(n){a.error("STORAGE_CLEANUP","Failed to clean React Query cache",{error:n instanceof Error?n.message:String(n)})}return t}function W(t,n=7){let e=0;try{const r=Date.now(),s=n*24*60*60*1e3,o=[];for(let l=0;l<localStorage.length;l++){const i=localStorage.key(l);if(i&&i.startsWith(t))try{const c=localStorage.getItem(i);if(c){const g=JSON.parse(c).state;g?.timestamp&&r-new Date(g.timestamp).getTime()>s&&(e+=J(i+c),o.push(i))}}catch{a.warn("STORAGE_CLEANUP","Invalid JSON in localStorage, removing",{key:i});const u=localStorage.getItem(i)||"";e+=J(i+u),o.push(i)}}o.forEach(l=>localStorage.removeItem(l)),o.length>0&&a.info("STORAGE_CLEANUP","Old store data cleaned",{storePrefix:t,keysRemoved:o.length,spaceFreesMB:(e/(1024*1024)).toFixed(2)})}catch(r){a.error("STORAGE_CLEANUP","Failed to clean old store data",{storePrefix:t,error:r instanceof Error?r.message:String(r)})}return e}function ve(){a.info("STORAGE_CLEANUP","Starting aggressive cleanup");const t=Y();let n=0;n+=he(),n+=W("fastlift:chat:",7),n+=W("fastlift:coach-chat:",7),n+=W("fastlift:meal-plan:",7),n+=W("fastlift:fridge-scan:",7);const e=Y();return a.info("STORAGE_CLEANUP","Aggressive cleanup completed",{freedMB:(n/(1024*1024)).toFixed(2),usageBeforePercent:t.percentage.toFixed(1),usageAfterPercent:e.percentage.toFixed(1),improvement:(t.percentage-e.percentage).toFixed(1)}),n}async function Ee(t,n="SAFE_STORAGE_OP"){try{return t()}catch(e){if(e instanceof Error&&(e.name==="QuotaExceededError"||e.message.includes("quota")||e.message.includes("QuotaExceededError"))){a.warn(n,"QuotaExceededError detected, attempting cleanup",{error:e.message});const r=ve();if(r>0){a.info(n,"Retrying operation after cleanup",{freedMB:(r/(1024*1024)).toFixed(2)});try{return t()}catch(s){throw a.error(n,"Operation failed even after cleanup",{error:s instanceof Error?s.message:String(s)}),s}}else throw a.error(n,"No space could be freed, operation failed",{error:e.message}),e}throw e}}function ye(){const t=Y();t.percentage>90?a.error("STORAGE_MONITOR","Storage critically full",{percentage:t.percentage.toFixed(1),usedMB:(t.used/(1024*1024)).toFixed(2)}):t.percentage>75&&a.warn("STORAGE_MONITOR","Storage usage high",{percentage:t.percentage.toFixed(1),usedMB:(t.used/(1024*1024)).toFixed(2)})}function I(t){return typeof t=="string"&&t.trim()===""?null:t}function Pe(t){return t?{...t,displayName:I(t.displayName),phoneNumber:I(t.phoneNumber),sex:I(t.sex),activity_level:I(t.activity_level),job_category:I(t.job_category),objective:I(t.objective),birthdate:I(t.birthdate),portraitUrl:I(t.portraitUrl),avatarUrl:I(t.avatarUrl),portraitSource:I(t.portraitSource),avatarStatus:I(t.avatarStatus)}:null}const we="fastlift:userstore:main",Ae=()=>({getItem:t=>{try{const n=localStorage.getItem(t);return n&&ye(),n}catch(n){return a.error("STORAGE","Failed to read from localStorage",{key:t,error:n instanceof Error?n.message:String(n)}),null}},setItem:(t,n)=>Ee(()=>{localStorage.setItem(t,n),a.debug("STORAGE","Successfully wrote to localStorage",{key:t,sizeMB:(new Blob([n]).size/(1024*1024)).toFixed(2)})},"USERSTORE_PERSIST"),removeItem:t=>{try{localStorage.removeItem(t)}catch(n){a.error("STORAGE","Failed to remove from localStorage",{key:t,error:n instanceof Error?n.message:String(n)})}}}),re=R()(q((t,n)=>({session:null,user:null,profile:null,loading:!1,saving:!1,initialized:!1,sessionReady:!1,sessionInfo:null,authReady:!1,setSession:e=>{t({session:e,user:e?.user||null,initialized:!0,authReady:!!e?.user,sessionInfo:e?.user?{userId:e.user.id,role:"user",email:e.user.email||void 0,displayName:e.user.user_metadata?.display_name||e.user.email?.split("@")[0]||void 0}:null}),a.debug("USER_STORE","Session updated",{hasSession:!!e,hasUser:!!e?.user,authReady:!!e?.user}),e?.user&&setTimeout(()=>{n().fetchProfile()},100)},setSessionReady:e=>{t({sessionReady:e})},setSessionInfo:e=>{t({sessionInfo:e})},setAuthReady:e=>{t({authReady:e})},setProfile:e=>{if(e===null){t({profile:null});return}t(r=>({profile:{...r.profile,...e,preferences:e.preferences?{...r.profile?.preferences,...e.preferences}:r.profile?.preferences,nutrition:e.nutrition?{...r.profile?.nutrition,...e.nutrition}:r.profile?.nutrition,householdDetails:e.householdDetails?{...r.profile?.householdDetails,...e.householdDetails}:r.profile?.householdDetails,mealPrepPreferences:e.mealPrepPreferences?{...r.profile?.mealPrepPreferences,...e.mealPrepPreferences}:r.profile?.mealPrepPreferences,kitchenEquipment:e.kitchenEquipment?{...r.profile?.kitchenEquipment,...e.kitchenEquipment}:r.profile?.kitchenEquipment,foodPreferences:e.foodPreferences?{...r.profile?.foodPreferences,...e.foodPreferences}:r.profile?.foodPreferences,sensoryPreferences:e.sensoryPreferences?{...r.profile?.sensoryPreferences,...e.sensoryPreferences}:r.profile?.sensoryPreferences,macroTargets:e.macroTargets?{...r.profile?.macroTargets,...e.macroTargets}:r.profile?.macroTargets,shoppingPreferences:e.shoppingPreferences?{...r.profile?.shoppingPreferences,...e.shoppingPreferences}:r.profile?.shoppingPreferences,fastingWindow:e.fastingWindow?{...r.profile?.fastingWindow,...e.fastingWindow}:r.profile?.fastingWindow}}))},fetchProfile:async()=>{const{session:e}=n();if(a.debug("USER_STORE","fetchProfile called",{hasSession:!!e,userId:e?.user?.id}),!!e?.user?.id){t({loading:!0});try{const{supabase:r}=await w(async()=>{const{supabase:i}=await import("./page-fridge-BvAjnJpI.js").then(c=>c.j);return{supabase:i}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9]));a.info("USER_STORE_FETCH_PROFILE","Starting profile fetch from database",{userId:e.user.id,timestamp:new Date().toISOString(),philosophy:"profile_fetch_audit"});const{data:s,error:o}=await r.from("user_profile").select("*").eq("user_id",e.user.id).limit(1);a.info("USER_STORE_FETCH_PROFILE","Raw DB response received",{hasData:!!s,dataLength:s?.length||0,hasError:!!o,errorMessage:o?.message,rawProfileData:s&&s.length>0?{user_id:s[0].user_id,display_name:s[0].display_name,sex:s[0].sex,height_cm:s[0].height_cm,weight_kg:s[0].weight_kg,target_weight_kg:s[0].target_weight_kg,activity_level:s[0].activity_level,objective:s[0].objective,birthdate:s[0].birthdate,hasPreferences:!!s[0].preferences,preferencesKeys:s[0].preferences?Object.keys(s[0].preferences):[]}:null,philosophy:"raw_db_response_audit"}),s&&s.length>0&&s[0].preferences?.skin_tone&&a.info("USER_STORE_CRITICAL_AUDIT","AUDIT: Raw DB response contains skin_tone",{rawDbSkinTone:s[0].preferences.skin_tone,rawDbSkinToneType:typeof s[0].preferences.skin_tone,rawDbSkinToneKeys:s[0].preferences.skin_tone?Object.keys(s[0].preferences.skin_tone):[],rawDbSkinToneStringified:s[0].preferences.skin_tone?JSON.stringify(s[0].preferences.skin_tone):null,hasAllV2PropertiesInRawDb:!!(s[0].preferences.skin_tone?.rgb&&s[0].preferences.skin_tone?.hex&&s[0].preferences.skin_tone?.srgb_f32&&s[0].preferences.skin_tone?.linear_f32&&s[0].preferences.skin_tone?.schema),v2PropertiesIntegrityInRawDb:s[0].preferences.skin_tone?{rgb:s[0].preferences.skin_tone.rgb,hex:s[0].preferences.skin_tone.hex,srgb_f32:s[0].preferences.skin_tone.srgb_f32,linear_f32:s[0].preferences.skin_tone.linear_f32,schema:s[0].preferences.skin_tone.schema,source:s[0].preferences.skin_tone.source,confidence:s[0].preferences.skin_tone.confidence}:null,philosophy:"raw_db_response_skin_tone_audit"});const l=s&&s.length>0?s[0]:null;if(o||!l){a.info("USER_STORE_FETCH_PROFILE","No existing profile found, creating new profile",{userId:e.user.id,hasError:!!o,errorMessage:o?.message,philosophy:"new_profile_creation"});const i={user_id:e.user.id,display_name:e.user.user_metadata?.display_name||e.user.email?.split("@")[0]||null,sex:null,height_cm:null,weight_kg:null,target_weight_kg:null,activity_level:null,objective:null,avatar_status:"none",preferences:{onboardingCompleted:!1,onboardingSkipped:!1,profileCompletion:.1,authProvider:"email"},nutrition:{allergies:[],intolerances:[]},health:{},emotions:{}};try{const{data:c,error:u}=await r.from("user_profile").upsert(i,{onConflict:"user_id",ignoreDuplicates:!1}).select().single();if(u)a.error("USER_STORE_FETCH_PROFILE","Failed to create new profile in DB",{userId:e.user.id,createError:u.message,philosophy:"new_profile_creation_db_error"}),t({profile:{userId:e.user.id,id:e.user.id,displayName:e.user.user_metadata?.display_name||e.user.email?.split("@")[0],sex:null,height_cm:null,weight_kg:null,preferences:{onboardingCompleted:!1,onboardingSkipped:!1,profileCompletion:.1},nutrition:{allergies:[],intolerances:[]},health:{},emotions:{}}});else{const g=await V(c);a.info("USER_STORE_FETCH_PROFILE","New profile created and mapped successfully",{userId:e.user.id,mappedProfileKeys:Object.keys(g),hasRequiredFields:!!(g.sex&&g.height_cm&&g.weight_kg),philosophy:"new_profile_creation_success"}),t({profile:g})}}catch(c){a.error("USER_STORE_FETCH_PROFILE","Exception during new profile creation",{userId:e.user.id,createError:c instanceof Error?c.message:"Unknown error",philosophy:"new_profile_creation_exception"}),t({profile:{userId:e.user.id,id:e.user.id,displayName:e.user.user_metadata?.display_name||e.user.email?.split("@")[0],sex:null,height_cm:null,weight_kg:null,preferences:{onboardingCompleted:!1,onboardingSkipped:!1,profileCompletion:.1},nutrition:{allergies:[],intolerances:[]},health:{},emotions:{}}})}}else{const i=await V(l);a.info("USER_STORE_FETCH_PROFILE","Existing profile fetched and mapped",{userId:e.user.id,mappedProfileKeys:Object.keys(i),profileIdentityData:{displayName:i.displayName,sex:i.sex,height_cm:i.height_cm,weight_kg:i.weight_kg,target_weight_kg:i.target_weight_kg,activity_level:i.activity_level,objective:i.objective,birthdate:i.birthdate},hasRequiredFields:!!(i.sex&&i.height_cm&&i.weight_kg),isProfileCompleteForScan:!!(i.sex&&i.height_cm&&i.weight_kg),philosophy:"existing_profile_fetch_success"}),i.preferences?.skin_tone&&a.info("USER_STORE_CRITICAL_AUDIT","AUDIT: skin_tone after mapping from DB",{mappedSkinTone:i.preferences.skin_tone,mappedSkinToneType:typeof i.preferences.skin_tone,mappedSkinToneKeys:i.preferences.skin_tone?Object.keys(i.preferences.skin_tone):[],mappedSkinToneStringified:i.preferences.skin_tone?JSON.stringify(i.preferences.skin_tone):null,hasAllV2PropertiesAfterMapping:!!(i.preferences.skin_tone?.rgb&&i.preferences.skin_tone?.hex&&i.preferences.skin_tone?.srgb_f32&&i.preferences.skin_tone?.linear_f32&&i.preferences.skin_tone?.schema),v2PropertiesIntegrityAfterMapping:i.preferences.skin_tone?{rgb:i.preferences.skin_tone.rgb,hex:i.preferences.skin_tone.hex,srgb_f32:i.preferences.skin_tone.srgb_f32,linear_f32:i.preferences.skin_tone.linear_f32,schema:i.preferences.skin_tone.schema,source:i.preferences.skin_tone.source,confidence:i.preferences.skin_tone.confidence}:null,philosophy:"mapped_skin_tone_after_db_fetch_audit"}),i.preferences?.skin_tone&&a.info("USER_STORE","DETAILED SKIN TONE AUDIT - After mapping from DB",{userId:e.user.id,mappedSkinTone:i.preferences.skin_tone,skinToneType:typeof i.preferences.skin_tone,skinToneConstructor:i.preferences.skin_tone.constructor?.name,skinToneKeys:Object.keys(i.preferences.skin_tone),skinToneStringified:JSON.stringify(i.preferences.skin_tone),hasRgbAfterMapping:!!i.preferences.skin_tone.rgb,hasLinearF32AfterMapping:!!i.preferences.skin_tone.linear_f32,hasSrgbF32AfterMapping:!!i.preferences.skin_tone.srgb_f32,hasHexAfterMapping:!!i.preferences.skin_tone.hex,hasSchemaAfterMapping:!!i.preferences.skin_tone.schema,rgbValueAfterMapping:i.preferences.skin_tone.rgb,linearF32ValueAfterMapping:i.preferences.skin_tone.linear_f32,srgbF32ValueAfterMapping:i.preferences.skin_tone.srgb_f32,hexValueAfterMapping:i.preferences.skin_tone.hex,schemaValueAfterMapping:i.preferences.skin_tone.schema,philosophy:"mapped_skin_tone_structure_audit_after_db_fetch"}),t({profile:i})}}catch(r){a.error("USER_STORE_FETCH_PROFILE","Exception during profile fetch",{error:r instanceof Error?r.message:"Unknown error",stack:r instanceof Error?r.stack:void 0,userId:e?.user?.id,philosophy:"profile_fetch_exception"})}finally{t({loading:!1})}}},saveProfile:async()=>{const{session:e,profile:r}=n();if(!(!e?.user?.id||!r)){a.info("USER_STORE_UPDATE_PROFILE","Starting profile update",{userId:e.user.id,updateKeys:Object.keys(r),updateValues:r,currentProfileKeys:Object.keys(r),philosophy:"profile_update_start"}),t({saving:!0});try{const{supabase:s}=await w(async()=>{const{supabase:c}=await import("./page-fridge-BvAjnJpI.js").then(u=>u.j);return{supabase:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),o=Oe(r,e.user.id),{data:l,error:i}=await s.from("user_profile").upsert(o).select().single();if(i)throw i;t({profile:await V(l)})}catch(s){throw s}finally{t({saving:!1})}}},updateProfile:async e=>{const{session:r}=n();if(!r?.user?.id)return;a.debug("USER_STORE_UPDATE_PROFILE","Starting profile update with data",{updates:e,userId:r.user.id,philosophy:"profile_update_debug"});const s=n().profile;s&&t({profile:{...s,...e,preferences:e.preferences?{...s.preferences,...e.preferences}:s.preferences}});try{const{supabase:o}=await w(async()=>{const{supabase:u}=await import("./page-fridge-BvAjnJpI.js").then(g=>g.j);return{supabase:u}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),l=De(e,s);a.debug("USER_STORE_UPDATE_PROFILE","Mapped updates for database",{dbUpdates:l,userId:r.user.id,philosophy:"db_updates_mapping_debug"}),l.user_id=r.user.id;const{data:i,error:c}=await o.from("user_profile").upsert(l,{onConflict:"user_id"}).select().single();if(c)throw c;a.debug("USER_STORE_UPDATE_PROFILE","Profile update successful",{userId:r.user.id,philosophy:"profile_update_success"}),t({profile:await V(i)})}catch(o){throw a.error("USER_STORE_UPDATE_PROFILE","Profile update failed",{error:o instanceof Error?o.message:"Unknown error",userId:r.user.id,philosophy:"profile_update_error"}),s&&t({profile:s}),o}}}),{name:we,storage:K(Ae),partialize:t=>({session:t.session,profile:t.profile?{userId:t.profile.userId,id:t.profile.id,displayName:t.profile.displayName,sex:t.profile.sex,height_cm:t.profile.height_cm,weight_kg:t.profile.weight_kg,birthdate:t.profile.birthdate,country:t.profile.country,avatarStatus:t.profile.avatarStatus,avatarUrl:t.profile.avatarUrl,health:t.profile.health}:null}),merge:(t,n)=>({...n,...t,profile:Pe(t?.profile),loading:n.loading,saving:n.saving}),onRehydrateStorage:()=>(t,n)=>{n?(a.error("USERSTORE_REHYDRATE","Failed to rehydrate store",{error:n.message}),oe("USERSTORE_REHYDRATE_ERROR")):(a.info("USERSTORE_REHYDRATE","Store rehydrated successfully"),oe("USERSTORE_REHYDRATE_SUCCESS"))}}));function De(t,n){const e=new Set(["user_id","display_name","birthdate","sex","height_cm","weight_kg","target_weight_kg","body_fat_perc","activity_level","job_category","phone_number","country","objective","avatar_status","avatar_url","created_at","updated_at","goals","constraints","preferences","emotion_baseline","role","emotions","nutrition","health","avatar_onboarding_completed","portrait_url","portrait_source","health_schema_version","country_health_cache","health_enriched_at","full_name","email","language","household_details","meal_prep_preferences","kitchen_equipment","food_preferences","sensory_preferences","macro_targets","shopping_preferences"]),r=new Set(["display_name","phone_number","sex","objective","activity_level","job_category","birthdate","country"]);function s(l){return l.replace(/[A-Z]/g,i=>"_"+i.toLowerCase())}const o={};for(const[l,i]of Object.entries(t)){if(i===void 0)continue;const c=s(l);e.has(c)?r.has(c)&&i===""?o[c]=null:o[c]=i:l==="preferences"&&typeof i=="object"?o.preferences={...n?.preferences||{},...i}:l==="nutrition"&&typeof i=="object"?o.nutrition={...n?.nutrition||{},...i}:l==="health"&&typeof i=="object"?o.health={...n?.health||{},...i}:l==="fastingWindow"&&typeof i=="object"&&(o.nutrition={...n?.nutrition||{},fastingWindow:i})}return o}async function V(t){a.debug("USER_STORE_MAP_DB_PROFILE","Mapping database profile to store format",{dbProfileNutrition:t.nutrition,hasNoKnownAllergies:t.nutrition?.noKnownAllergies,userId:t.user_id,philosophy:"db_profile_mapping_debug"});const n=t.preferences||{};return{userId:t.user_id,id:t.user_id,displayName:I(t.display_name),phoneNumber:I(t.phone_number),country:I(t.country),birthdate:I(t.birthdate||t.dob),sex:I(t.sex),height_cm:t.height_cm,weight_kg:t.weight_kg,target_weight_kg:t.target_weight_kg,bodyFatPerc:t.body_fat_perc,activity_level:I(t.activity_level),job_category:I(t.job_category),objective:I(t.objective),nutrition:{diet:t.nutrition?.diet||"",budgetLevel:t.nutrition?.budgetLevel||void 0,allergies:Array.isArray(t.nutrition?.allergies)?t.nutrition.allergies:[],intolerances:Array.isArray(t.nutrition?.intolerances)?t.nutrition.intolerances:[],noKnownAllergies:t.nutrition?.noKnownAllergies??!1,proteinTarget_g:t.nutrition?.proteinTarget_g||void 0,disliked:Array.isArray(t.nutrition?.disliked)?t.nutrition.disliked:[]},fastingWindow:t.nutrition?.fastingWindow||{},health:t.health||{},householdDetails:t.household_details||{},mealPrepPreferences:t.meal_prep_preferences||{},kitchenEquipment:t.kitchen_equipment||{},foodPreferences:t.food_preferences||{cuisines:[],ingredients:[],flavors:[]},sensoryPreferences:t.sensory_preferences||{},macroTargets:t.macro_targets||{},shoppingPreferences:t.shopping_preferences||{},goals:t.goals||{},constraints:t.constraints||{},preferences:n,emotionBaseline:t.emotion_baseline||{},avatarStatus:I(t.avatar_status),avatarUrl:I(t.avatar_url),avatarOnboardingCompleted:t.avatar_onboarding_completed,portraitUrl:I(t.portrait_url),portraitSource:I(t.portrait_source)}}function Oe(t,n){return{user_id:n,display_name:t.displayName,phone_number:t.phoneNumber,country:t.country,birthdate:t.birthdate,sex:t.sex,height_cm:t.height_cm,weight_kg:t.weight_kg,target_weight_kg:t.target_weight_kg,activity_level:t.activity_level,job_category:t.job_category,objective:t.objective,portrait_url:t.portraitUrl,portrait_source:t.portraitSource,nutrition:{...t.nutrition||{},fastingWindow:t.fastingWindow||{}},health:t.health||{},preferences:t.preferences||{},household_details:t.householdDetails||{},meal_prep_preferences:t.mealPrepPreferences||{},kitchen_equipment:t.kitchenEquipment||{},food_preferences:t.foodPreferences||{cuisines:[],ingredients:[],flavors:[]},sensory_preferences:t.sensoryPreferences||{},macro_targets:t.macroTargets||{},shopping_preferences:t.shoppingPreferences||{},avatar_status:t.avatarStatus,avatar_url:t.avatarUrl,avatar_onboarding_completed:t.avatarOnboardingCompleted}}const ee=Object.freeze(Object.defineProperty({__proto__:null,useUserStore:re},Symbol.toStringTag,{value:"Module"})),be=(t,n)=>({date:t,dayName:n,meals:{breakfast:{title:"",description:"",ingredients:[],prep_time_min:0,calories_est:0,status:"idle",isDetailedRecipeGenerated:!1},lunch:{title:"",description:"",ingredients:[],prep_time_min:0,calories_est:0,status:"idle",isDetailedRecipeGenerated:!1},dinner:{title:"",description:"",ingredients:[],prep_time_min:0,calories_est:0,status:"idle",isDetailedRecipeGenerated:!1},snack:{title:"",description:"",ingredients:[],prep_time_min:0,calories_est:0,status:"idle",isDetailedRecipeGenerated:!1}},daily_summary:"",prepTime:0,cookTime:0,totalCalories:0,status:"loading"}),Te=(t,n)=>({generateMealPlan:async(e,r)=>{const s=n();if(!s.selectedInventoryId){a.error("MEAL_PLAN_STORE","No inventory selected for meal plan generation");return}try{if(t({isGenerating:!0,generationProgress:0,currentLoadingTitle:"Initialisation",currentLoadingSubtitle:"Préparation de votre plan personnalisé",loadingMessage:"Démarrage de la génération..."}),!s.referenceStartDate&&e===1){const _=new Date;_.setHours(0,0,0,0),t({referenceStartDate:_.toISOString()})}const o=de(e,s.referenceStartDate),l=[];for(let _=0;_<7;_++){const b=new Date(o);b.setDate(o.getDate()+_);const j=b.toISOString().split("T")[0],M=b.toLocaleDateString("fr-FR",{weekday:"long"});l.push(be(j,M))}const i={id:`week-${e}-skeleton`,weekNumber:e,startDate:o.toISOString().split("T")[0],days:l,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};t({currentPlan:i,currentWeek:e}),a.info("MEAL_PLAN_STORE","Skeleton plan initialized - EmptyPlanState will NOT show",{weekNumber:e,skeletonDaysCount:l.length,hasSkeleton:!0,currentPlanSet:!0,timestamp:new Date().toISOString()}),n().startProgressSimulation();const{data:{user:c}}=await y.auth.getUser();if(!c)throw new Error("User not authenticated");const u=re.getState().profile;if(!u)throw new Error("User profile not found");a.info("MEAL_PLAN_STORE","Starting meal plan generation",{weekNumber:e,inventoryId:s.selectedInventoryId,userId:c.id,timestamp:new Date().toISOString()});const g=new Date(o);g.setDate(o.getDate()+6);const{data:{session:p}}=await y.auth.getSession();if(!p)throw new Error("No session found");const d=await fetch("https://kwipydbtjagypocpvbwn.supabase.co/functions/v1/meal-plan-generator",{method:"POST",headers:{Authorization:`Bearer ${p.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({user_id:c.id,week_number:e,start_date:o.toISOString().split("T")[0],end_date:g.toISOString().split("T")[0],inventory_count:r?.length||0,has_preferences:!!u})});if(!d.ok)throw new Error(`HTTP error! status: ${d.status}`);if(!d.body)throw new Error("No response body");const S=d.body.getReader(),h=new TextDecoder;let O=[],N=`week-${e}-${Date.now()}`,x=null,f=null,v=[],m=null;try{for(;;){const{done:_,value:b}=await S.read();if(_)break;const M=h.decode(b).split(`
`);for(const F of M)if(F.startsWith("data: "))try{const T=JSON.parse(F.slice(6));if(T.type==="day"){const X=fe(T.data);O.push(X);const Q=n().currentPlan;if(!Q)return;const ue=Q.days.map(H=>O.find(pe=>pe.date===H.date)||H),ge={...Q,days:ue,updatedAt:new Date().toISOString()};t({currentPlan:ge});const se=O.filter(H=>H.status==="ready").length,ae=Math.min(90,se/7*80);t({generationProgress:ae}),a.info("MEAL_PLAN_STORE","Day received and skeleton replaced",{date:X.date,dayName:X.dayName,readyDaysCount:se,progress:ae,timestamp:new Date().toISOString()})}else T.type==="complete"&&(N=T.data.id||N,x=T.data.nutritional_summary,f=T.data.estimated_weekly_cost,v=T.data.batch_cooking_days||[],m=T.data.ai_explanation||null)}catch(T){a.warn("MEAL_PLAN_STORE","Failed to parse SSE data",{line:F,error:T instanceof Error?T.message:"Unknown error",lineLength:F.length,lineSlice:F.slice(6),timestamp:new Date().toISOString()})}}}finally{S.releaseLock()}const P=O.filter(_=>_.status==="ready");if(P.length===0)throw new Error("No meal plan days received from generation");const D={id:N,weekNumber:e,startDate:o.toISOString().split("T")[0],days:O,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),nutritionalSummary:x,estimatedWeeklyCost:f,batchCookingDays:v,aiExplanation:m},k=[...new Set([...s.availableWeeks,e])].sort((_,b)=>_-b),E=Math.max(s.maxAvailableWeek,e);t({currentPlan:D,currentWeek:e,availableWeeks:k,maxAvailableWeek:E,isGenerating:!1,generationProgress:100,currentLoadingTitle:"Terminé !",currentLoadingSubtitle:"Votre plan est prêt",loadingMessage:"Plan de repas généré avec succès"}),n().stopProgressSimulation(),a.info("MEAL_PLAN_STORE","Meal plan generation completed",{weekNumber:e,planId:D.id,daysCount:P.length,timestamp:new Date().toISOString()})}catch(o){t({currentPlan:null,isGenerating:!1,generationProgress:0,currentLoadingTitle:"Erreur",currentLoadingSubtitle:"Échec de la génération",loadingMessage:o instanceof Error?o.message:"Erreur inconnue"}),n().stopProgressSimulation(),a.error("MEAL_PLAN_STORE","Meal plan generation failed - EmptyPlanState will show",{weekNumber:e,error:o instanceof Error?o.message:"Unknown error",currentPlanCleared:!0,timestamp:new Date().toISOString()})}},regenerateWeek:async(e,r)=>{a.info("MEAL_PLAN_STORE","Regenerating week",{weekNumber:r}),await n().generateMealPlan(r,e)},generateNextWeek:async e=>{const s=n().maxAvailableWeek+1;a.info("MEAL_PLAN_STORE","Generating next week",{nextWeek:s}),await n().generateMealPlan(s,e)},generateSpecificWeek:async(e,r)=>{a.info("MEAL_PLAN_STORE","Generating specific week",{weekNumber:r}),await n().generateMealPlan(r,e)},setIsGeneratingDetailedRecipes:e=>{t({isGeneratingDetailedRecipes:e})},cancelDetailedRecipeGeneration:()=>{const e=n();if(t({isGeneratingDetailedRecipes:!1}),e.currentPlan){const r={...e.currentPlan,days:e.currentPlan.days.map(s=>({...s,meals:{breakfast:s.meals.breakfast?.status==="loading"?{...s.meals.breakfast,status:"idle"}:s.meals.breakfast,lunch:s.meals.lunch?.status==="loading"?{...s.meals.lunch,status:"idle"}:s.meals.lunch,dinner:s.meals.dinner?.status==="loading"?{...s.meals.dinner,status:"idle"}:s.meals.dinner,snack:s.meals.snack?.status==="loading"?{...s.meals.snack,status:"idle"}:s.meals.snack}}))};t({currentPlan:r})}a.info("MEAL_PLAN_STORE","Detailed recipe generation cancelled")}}),Z=(t,n,e,r,s)=>{const{currentPlan:o,setCurrentPlan:l}=C.getState();if(!o||!o.days[t]){console.error("MEAL_PLAN_STORE No plan or day found for image URL update");return}const i={...o,days:o.days.map((c,u)=>u===t?{...c,meals:{...c.meals,[n]:{...c.meals[n],imageUrl:s?void 0:e,imageGenerationError:s||!1,updatedAt:r}}}:c)};l(i)},Ce=async(t,n,e)=>{try{console.log("MEAL_PLAN_STORE Starting image generation for meal",{dayIndex:t,mealType:n,mealTitle:e.mealName||e.title,hasDetailedRecipe:!!e.detailedRecipe});const r={title:e.detailedRecipe?.title||e.mealName||e.title||"Generated Meal Image",description:e.detailedRecipe?.description||e.descriptionSummary||"",ingredients:e.detailedRecipe?.ingredients||(e.mainIngredients||[]).map(h=>typeof h=="string"?{name:h}:h)},s=JSON.stringify({title:r.title,ingredients:r.ingredients.map(h=>h.name).sort().join(",")}),l=new TextEncoder().encode(s),i=await crypto.subtle.digest("SHA-256",l),u=Array.from(new Uint8Array(i)).map(h=>h.toString(16).padStart(2,"0")).join(""),g=e.detailedRecipe?.id||e.recipeId||crypto.randomUUID(),{data:{session:p}}=await y.auth.getSession();if(!p)throw new Error("No session found");const d=await fetch("https://kwipydbtjagypocpvbwn.supabase.co/functions/v1/image-generator",{method:"POST",headers:{Authorization:`Bearer ${p.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({recipe_id:g,type:"recipe",recipe_details:r,image_signature:u,user_id:(await y.auth.getUser()).data.user?.id})});if(!d.ok){console.error("MEAL_PLAN_STORE Image generation failed:",d.status),Z(t,n,"",new Date().toISOString(),!0);return}const S=await d.json();console.log("MEAL_PLAN_STORE Image generated successfully",{dayIndex:t,mealType:n,imageUrl:S.image_url}),Z(t,n,S.image_url,new Date().toISOString(),!1)}catch(r){console.error("MEAL_PLAN_STORE Error generating image for meal:",r),Z(t,n,"",new Date().toISOString(),!0)}},Re=async(t,n)=>{console.log("🔄 STARTING generateDetailedRecipeForMeal",{dayIndex:t,mealType:n,timestamp:new Date().toISOString()});let e=C.getState().currentPlan;if(!e||!e.days[t]){console.error("MEAL_PLAN_STORE No plan or day found for detailed recipe generation"),console.error("❌ generateDetailedRecipeForMeal FAILED: No plan or day found",{dayIndex:t,mealType:n,hasPlan:!!e,daysCount:e?.days?.length||0});return}const r=e.days[t].meals[n];if(!r){console.error("MEAL_PLAN_STORE No meal found for detailed recipe generation"),console.error("❌ generateDetailedRecipeForMeal FAILED: No meal found",{dayIndex:t,mealType:n,availableMeals:Object.keys(e.days[t].meals||{})});return}try{const{data:{user:s}}=await y.auth.getUser();if(!s)throw new Error("User not authenticated");const o=re.getState().profile;if(!o)throw new Error("User profile not found");if(e=C.getState().currentPlan,!e)return;const l={...e,days:e.days.map((d,S)=>S===t?{...d,meals:{...d.meals,[n]:{...r,status:"loading"}}}:d)};C.getState().setCurrentPlan(l),console.log("MEAL_PLAN_STORE Starting detailed recipe generation",{dayIndex:t,mealType:n,mealTitle:r.title}),console.log("📡 CALLING Edge Function: recipe-detail-generator",{userId:s.id,mealTitle:r.mealName||r.title||"Repas sans nom",targetCalories:r.calories_est,ingredientsCount:r.ingredients?.length||0});const{data:{session:i}}=await y.auth.getSession();if(!i)throw new Error("No session found");const c=await fetch("https://kwipydbtjagypocpvbwn.supabase.co/functions/v1/recipe-detail-generator",{method:"POST",headers:{Authorization:`Bearer ${i.access_token}`,"Content-Type":"application/json"},body:JSON.stringify({user_id:s.id,meal_title:r.mealName||r.title||"Repas sans nom",main_ingredients:r.ingredients||[],user_preferences:{identity:o,nutrition:o.nutrition||{},kitchen_equipment:o.kitchen_equipment||{},food_preferences:o.food_preferences||{},sensory_preferences:o.sensory_preferences||{}},meal_type:n,target_calories:r.calories_est})});if(!c.ok)throw new Error(`Recipe generation failed: ${c.status}`);const u=await c.json();console.log("✅ Edge Function response received",{dayIndex:t,mealType:n,cached:u.cached,modelUsed:u.model_used,hasRecipe:!!u.recipe});const g=u.recipe;if(console.log("MEAL_PLAN_STORE Detailed recipe generated successfully",{dayIndex:t,mealType:n,cached:u.cached,modelUsed:u.model_used}),e=C.getState().currentPlan,!e)return;const p={...e,days:e.days.map((d,S)=>S===t?{...d,meals:{...d.meals,[n]:{...r,status:"ready",isDetailedRecipeGenerated:!0,detailedRecipe:g,imageUrl:g.imageUrl||r.imageUrl,imageGenerationError:g.imageGenerationError||r.imageGenerationError||!1,imageSignature:g.imageSignature||r.imageSignature,updatedAt:new Date().toISOString()}}}:d)};if(C.getState().setCurrentPlan(p),g&&g.id&&!g.imageUrl){const d=p.days[t].meals[n];Ce(t,n,d)}}catch(s){if(console.error("MEAL_PLAN_STORE Error generating detailed recipe:",s),console.error("❌ generateDetailedRecipeForMeal FAILED with error",{dayIndex:t,mealType:n,error:s instanceof Error?s.message:"Unknown error",stack:s instanceof Error?s.stack:void 0}),e=C.getState().currentPlan,!e)return;const o={...e,days:e.days.map((l,i)=>i===t?{...l,meals:{...l.meals,[n]:{...r,status:"error",errorMessage:s instanceof Error?s.message:"Erreur lors de la génération de la recette"}}}:l)};C.getState().setCurrentPlan(o)}},Ze=async t=>{console.log("🚀 STARTING generateAllDetailedRecipesForDay",{dayIndex:t,timestamp:new Date().toISOString()});const{currentPlan:n,setIsGeneratingDetailedRecipes:e}=C.getState();if(!n||!n.days[t]){console.error("MEAL_PLAN_STORE No plan or day found for bulk recipe generation"),console.error("❌ generateAllDetailedRecipesForDay FAILED: No plan or day found",{dayIndex:t,hasPlan:!!n,daysCount:n?.days?.length||0});return}e(!0);const r=n.days[t],s=["breakfast","lunch","dinner","snack"];console.log("MEAL_PLAN_STORE Starting bulk recipe generation for day",{dayIndex:t,dayName:r.dayName,date:r.date});const o=s.filter(i=>{const c=r.meals[i];return c&&!c.isDetailedRecipeGenerated&&c.status!=="loading"});console.log("📋 Meals to generate:",{dayIndex:t,mealsToGenerate:o,totalMealsCount:s.length,mealsNeedingGeneration:o.length}),console.log("⚡ Starting concurrent recipe generation with Promise.all");const l=o.map(i=>Re(t,i).catch(c=>(console.error(`MEAL_PLAN_STORE Error generating recipe for ${i}:`,c),console.error(`❌ Individual recipe generation failed for ${i}`,{dayIndex:t,mealType:i,error:c instanceof Error?c.message:"Unknown error"}),null)));try{await Promise.all(l),console.log("✅ All recipe generations completed successfully",{dayIndex:t,dayName:r.dayName,generatedCount:o.length})}catch(i){console.error("❌ Promise.all failed in generateAllDetailedRecipesForDay",{dayIndex:t,error:i instanceof Error?i.message:"Unknown error"})}finally{e(!1)}console.log("MEAL_PLAN_STORE Bulk recipe generation completed for day",{dayIndex:t,dayName:r.dayName,generatedCount:o.length})},et=()=>{const{setIsGenerating:t,setCurrentPlan:n}=C.getState();console.log("MEAL_PLAN_STORE Cancelling meal plan generation"),t(!1),n(null)},ke=(t,n)=>({setCurrentWeek:async e=>{const r=n();if(a.info("MEAL_PLAN_STORE","Setting current week",{weekNumber:e,previousWeek:r.currentWeek,timestamp:new Date().toISOString()}),r.currentPlan&&r.currentPlan.weekNumber===e){t({currentWeek:e});return}await n().fetchMealPlanForWeek(e),t({currentWeek:e})},isWeekAvailable:e=>n().availableWeeks.includes(e),isCurrentWeekActive:e=>n().currentWeek===e,getWeekDateRange:e=>{const r=n(),s=de(e,r.referenceStartDate),o=new Date(s);return o.setDate(s.getDate()+6),Se(s,o)},canGenerateNextWeek:()=>{const e=n();return e.maxAvailableWeek>0&&!e.isGenerating}}),Le=(t,n)=>({clearPlan:()=>{t({currentPlan:null,currentWeek:1,availableWeeks:[1],maxAvailableWeek:0,recipes:[]}),a.info("MEAL_PLAN_STORE","Plan cleared",{timestamp:new Date().toISOString()})},setCurrentPlan:e=>{t({currentPlan:e}),a.info("MEAL_PLAN_STORE","Current plan updated",{planId:e?.id||"null",timestamp:new Date().toISOString()})},loadRecipesForPlan:async e=>{try{const r=[];if(e.days.forEach(l=>{Object.values(l.meals).forEach(i=>{i?.recipeId&&r.push(i.recipeId)})}),r.length===0){a.info("MEAL_PLAN_STORE","No recipe IDs found in plan",{planId:e.id,timestamp:new Date().toISOString()});return}a.info("MEAL_PLAN_STORE","Loading recipes for plan",{planId:e.id,recipeIds:r,timestamp:new Date().toISOString()});const{data:s,error:o}=await y.from("recipes").select("*").in("id",r);if(o)throw new Error(`Failed to load recipes: ${o.message}`);t({recipes:s||[]}),a.info("MEAL_PLAN_STORE","Recipes loaded for plan",{planId:e.id,recipesCount:s?.length||0,timestamp:new Date().toISOString()})}catch(r){a.error("MEAL_PLAN_STORE","Failed to load recipes for plan",{planId:e.id,error:r instanceof Error?r.message:"Unknown error",timestamp:new Date().toISOString()})}},fetchMealPlanForWeek:async e=>{try{const{data:{user:r}}=await y.auth.getUser();if(!r)return;a.info("MEAL_PLAN_STORE","Fetching meal plan for week",{weekNumber:e,userId:r.id,timestamp:new Date().toISOString()}),a.info("MEAL_PLAN_STORE","Meal plan fetch completed",{weekNumber:e,timestamp:new Date().toISOString()})}catch(r){a.error("MEAL_PLAN_STORE","Failed to fetch meal plan for week",{weekNumber:e,error:r instanceof Error?r.message:"Unknown error",timestamp:new Date().toISOString()})}},loadAllMealPlans:async()=>{try{const{data:{user:e}}=await y.auth.getUser();if(!e)return;a.info("MEAL_PLAN_STORE","Loading all meal plans",{userId:e.id,timestamp:new Date().toISOString()});const{data:r,error:s}=await y.from("meal_plans").select("*").eq("user_id",e.id).order("created_at",{ascending:!1});if(s)throw new Error(`Failed to load meal plans: ${s.message}`);const o=(r||[]).map(l=>({id:l.id,weekNumber:1,startDate:l.created_at,days:[],createdAt:l.created_at,updatedAt:l.updated_at}));t({allMealPlans:o}),a.info("MEAL_PLAN_STORE","All meal plans loaded",{count:o.length,timestamp:new Date().toISOString()})}catch(e){a.error("MEAL_PLAN_STORE","Failed to load all meal plans",{error:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()}),t({allMealPlans:[]})}},saveCurrentMealPlan:async()=>{try{const{data:{user:e}}=await y.auth.getUser();if(!e)throw new Error("User not authenticated");const{currentPlan:r}=n();if(!r)throw new Error("No current plan to save");a.info("MEAL_PLAN_STORE","Saving current meal plan",{planId:r.id,weekNumber:r.weekNumber,userId:e.id,timestamp:new Date().toISOString()});const s={user_id:e.id,plan_data:{id:r.id,weekNumber:r.weekNumber,startDate:r.startDate,days:r.days,nutritionalSummary:r.nutritionalSummary,estimatedWeeklyCost:r.estimatedWeeklyCost,batchCookingDays:r.batchCookingDays,aiExplanation:r.aiExplanation},updated_at:new Date().toISOString()},{error:o}=await y.from("meal_plans").upsert(s,{onConflict:"id"});if(o)throw new Error(`Failed to save meal plan: ${o.message}`);a.info("MEAL_PLAN_STORE","Current meal plan saved successfully",{planId:r.id,weekNumber:r.weekNumber,userId:e.id,timestamp:new Date().toISOString()})}catch(e){throw a.error("MEAL_PLAN_STORE","Failed to save current meal plan",{error:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()}),e}}}),Ne={currentPlan:null,currentWeek:1,availableWeeks:[1],maxAvailableWeek:1,referenceStartDate:null,availableInventories:[],selectedInventoryId:null,isGenerating:!1,isGeneratingDetailedRecipes:!1,generationProgress:0,loadingMessage:"",currentLoadingTitle:"",currentLoadingSubtitle:"",progressIntervalId:null,progressTimeoutId:null,simulatedStepIndex:0,lastBackendProgressUpdate:0,simulatedProgressStartTime:0,simulatedProgressCurrentStepDuration:0,simulatedProgressCurrentStepStartValue:0,simulatedProgressCurrentStepEndValue:0,recipes:[],allMealPlans:[]},C=R()(q((t,n)=>({...Ne,...Ie(t,n),..._e(t,n),...Te(t,n),...ke(t,n),...Le(t,n),setIsGeneratingDetailedRecipes:e=>t({isGeneratingDetailedRecipes:e})}),{name:me,partialize:t=>({currentPlan:t.currentPlan,currentWeek:t.currentWeek,availableWeeks:t.availableWeeks,maxAvailableWeek:t.maxAvailableWeek,referenceStartDate:t.referenceStartDate,selectedInventoryId:t.selectedInventoryId,recipes:t.recipes}),merge:(t,n)=>({...n,...t,availableWeeks:Array.isArray(t?.availableWeeks)&&t.availableWeeks.length>0?t.availableWeeks:[1],maxAvailableWeek:typeof t?.maxAvailableWeek=="number"&&t.maxAvailableWeek>=1?t.maxAvailableWeek:1,isGenerating:!1,isGeneratingDetailedRecipes:!1,generationProgress:0,loadingMessage:"",currentLoadingTitle:"",currentLoadingSubtitle:"",progressIntervalId:null,progressTimeoutId:null,simulatedStepIndex:0,lastBackendProgressUpdate:0,simulatedProgressStartTime:0,simulatedProgressCurrentStepDuration:0,simulatedProgressCurrentStepStartValue:0,simulatedProgressCurrentStepEndValue:0,availableInventories:[]})})),te=Object.freeze(Object.defineProperty({__proto__:null,useMealPlanStore:C},Symbol.toStringTag,{value:"Module"})),tt=R((t,n)=>({isOpen:!1,title:"",message:"",processName:"",dirtyFields:[],onConfirm:null,onCancel:null,onSaveAndExit:null,showModal:e=>{a.info("EXIT_MODAL_STORE","Showing exit modal",{title:e.title,processName:e.processName,hasSaveAndExit:!!e.onSaveAndExit,dirtyFieldsCount:e.dirtyFields?.length||0,timestamp:new Date().toISOString()}),t({isOpen:!0,title:e.title,message:e.message,processName:e.processName,dirtyFields:e.dirtyFields||[],onConfirm:e.onConfirm,onCancel:e.onCancel,onSaveAndExit:e.onSaveAndExit||null}),setTimeout(()=>{const r=document.querySelector(".global-exit-modal");a.info("EXIT_MODAL_STORE","Modal DOM check after show",{modalExists:!!r,modalVisible:r?getComputedStyle(r).display!=="none":!1,timestamp:new Date().toISOString()})},10)},hideModal:()=>{a.info("EXIT_MODAL_STORE","Hiding exit modal",{wasOpen:n().isOpen,timestamp:new Date().toISOString()}),t({isOpen:!1,title:"",message:"",processName:"",dirtyFields:[],onConfirm:null,onCancel:null,onSaveAndExit:null})},saveAndExit:async()=>{const{onSaveAndExit:e}=n();if(a.info("EXIT_MODAL_STORE","Save and exit triggered",{hasOnSaveAndExit:!!e,timestamp:new Date().toISOString()}),e)try{await e(),a.info("EXIT_MODAL_STORE","Save and exit completed successfully",{timestamp:new Date().toISOString()})}catch(r){throw a.error("EXIT_MODAL_STORE","Save and exit failed",{error:r instanceof Error?r.message:"Unknown error",timestamp:new Date().toISOString()}),r}n().hideModal()},confirmExit:()=>{const{onConfirm:e}=n();a.info("EXIT_MODAL_STORE","Exit confirmed",{hasOnConfirm:!!e,timestamp:new Date().toISOString()}),e&&e(),n().hideModal()},cancelExit:()=>{const{onCancel:e}=n();a.info("EXIT_MODAL_STORE","Exit cancelled",{hasOnCancel:!!e,timestamp:new Date().toISOString()}),e&&e(),n().hideModal()}})),rt=R((t,n)=>({dirtyTabs:{},setTabDirty:(e,r,s,o)=>{t(l=>({dirtyTabs:{...l.dirtyTabs,[e]:{isDirty:r,changedFields:s,sectionName:o}}}))},resetTabDirty:e=>{t(r=>({dirtyTabs:{...r.dirtyTabs,[e]:{isDirty:!1}}}))},isAnyTabDirty:()=>{const{dirtyTabs:e}=n();return Object.values(e).some(r=>r.isDirty===!0)},getDirtyTabs:()=>{const{dirtyTabs:e}=n();return Object.entries(e).filter(([r,s])=>s.isDirty).map(([r,s])=>({tabId:r,info:s}))},resetAllDirtyStatus:()=>{t({dirtyTabs:{}})}})),nt={FLOATING_CHAT_BUTTON:9994,CHAT_DRAWER:9995,CENTRAL_MENU:9998},st=R((t,n)=>({activeOverlayId:"none",previousOverlayId:"none",open:e=>{const r=n();a.debug("OVERLAY_STORE","Opening overlay",{overlayId:e,currentActiveOverlay:r.activeOverlayId,willCloseExisting:r.activeOverlayId!=="none",timestamp:new Date().toISOString()}),r.activeOverlayId!=="none"&&r.activeOverlayId!==e&&a.info("OVERLAY_STORE","Closing existing overlay before opening new one",{closingOverlay:r.activeOverlayId,openingOverlay:e,timestamp:new Date().toISOString()}),t({previousOverlayId:r.activeOverlayId,activeOverlayId:e}),a.info("OVERLAY_STORE","Overlay opened successfully",{overlayId:e,previousOverlay:r.activeOverlayId,timestamp:new Date().toISOString()})},close:()=>{const e=n();if(e.activeOverlayId==="none"){a.debug("OVERLAY_STORE","Close called but no overlay is open",{timestamp:new Date().toISOString()});return}a.debug("OVERLAY_STORE","Closing overlay",{closingOverlay:e.activeOverlayId,timestamp:new Date().toISOString()}),t({previousOverlayId:e.activeOverlayId,activeOverlayId:"none"}),a.info("OVERLAY_STORE","Overlay closed successfully",{closedOverlay:e.previousOverlayId,timestamp:new Date().toISOString()})},toggle:e=>{n().activeOverlayId===e?n().close():n().open(e)},isOpen:e=>n().activeOverlayId===e,isAnyOpen:()=>n().activeOverlayId!=="none"})),Me={type:"idle"},Fe={training:{id:"training",displayName:"Coach Training",systemPrompt:"Tu es un coach sportif expert et ultra-motivant. Accompagne l'utilisateur pendant sa séance avec des conseils techniques précis et motivants. Reste concis (2-3 phrases max), énergique et pratique. Tutoie l'utilisateur.",capabilities:{voice:!0,suggestions:!0,exerciseFeedback:!0},color:"#FF6B35",icon:"Dumbbell"},nutrition:{id:"nutrition",displayName:"Coach Nutrition",systemPrompt:"Tu es un nutritionniste expert et bienveillant. Aide l'utilisateur à analyser ses repas et optimiser ses choix alimentaires. Reste pédagogue, positif et donne des conseils pratiques applicables. Explique clairement les concepts nutritionnels.",capabilities:{voice:!0,suggestions:!0,mealAnalysis:!0},color:"#10B981",icon:"Utensils"},fasting:{id:"fasting",displayName:"Coach Jeûne",systemPrompt:"Tu es un expert du jeûne intermittent. Accompagne l'utilisateur pendant sa session de jeûne avec encouragement et compréhension. Donne des astuces pour gérer la faim et explique les bénéfices. Reste rassurant et motivant.",capabilities:{voice:!0,suggestions:!0,fastingTips:!0},color:"#F59E0B",icon:"Timer"},general:{id:"general",displayName:"Assistant Général",systemPrompt:"Tu es l'assistant personnel intelligent de TwinForge. Aide l'utilisateur à naviguer dans l'app et atteindre ses objectifs wellness. Reste amical, clair et proactif. Guide vers les bonnes fonctionnalités selon les besoins.",capabilities:{voice:!0,suggestions:!0,navigation:!0},color:"#18E3FF",icon:"MessageSquare"},"body-scan":{id:"body-scan",displayName:"Coach Corps",systemPrompt:"Tu es un expert en analyse corporelle et posture. Guide l'utilisateur dans son scan corporel avec expertise et bienveillance. Donne des conseils pratiques sur la posture et l'alignement.",capabilities:{voice:!0,suggestions:!0},color:"#A855F7",icon:"Scan"}},at=R()(q((t,n)=>({isOpen:!1,currentMode:"general",position:{side:"right",width:420,isMinimized:!1},conversationId:null,messages:[],isTyping:!1,isRecording:!1,isProcessing:!1,isSpeaking:!1,autoOpenOnRoute:!1,closeOnNavigation:!0,hasUnreadMessages:!1,unreadCount:0,lastReadMessageId:null,modeConfigs:Fe,chatState:Me,isInStep2:!1,hasStep2Intro:!1,currentNotification:null,open:e=>{const r=e||n().currentMode;t({isOpen:!0,currentMode:r}),n().markAsRead(),n().hideNotification(),a.info("GLOBAL_CHAT","Chat opened",{mode:r,timestamp:new Date().toISOString()})},close:()=>{t({isOpen:!1}),a.info("GLOBAL_CHAT","Chat closed",{mode:n().currentMode,timestamp:new Date().toISOString()})},toggle:()=>{const{isOpen:e}=n();e?n().close():n().open()},setMode:e=>{const r=n().currentMode;t({currentMode:e}),a.info("GLOBAL_CHAT","Mode changed",{from:r,to:e,timestamp:new Date().toISOString()})},setPosition:e=>{t(r=>({position:{...r.position,...e}}))},startConversation:(e,r)=>{const s=z();t({conversationId:s,currentMode:e,messages:[],isOpen:!0}),a.info("GLOBAL_CHAT","Conversation started",{conversationId:s,mode:e,hasContextData:!!r,timestamp:new Date().toISOString()})},endConversation:()=>{const{conversationId:e,currentMode:r}=n();t({conversationId:null,isTyping:!1,isRecording:!1,isProcessing:!1,isSpeaking:!1}),a.info("GLOBAL_CHAT","Conversation ended",{conversationId:e,mode:r,messageCount:n().messages.length,timestamp:new Date().toISOString()})},addMessage:e=>{const r={...e,id:z(),timestamp:new Date};t(s=>({messages:[...s.messages,r]})),r.role==="coach"&&!n().isOpen&&n().incrementUnread(),a.debug("GLOBAL_CHAT","Message added",{messageId:r.id,role:r.role,type:r.type,mode:n().currentMode,timestamp:new Date().toISOString()})},clearMessages:()=>{t({messages:[]}),a.debug("GLOBAL_CHAT","Messages cleared",{mode:n().currentMode,timestamp:new Date().toISOString()})},setTyping:e=>{t({isTyping:e})},setRecording:e=>{t({isRecording:e})},setProcessing:e=>{t({isProcessing:e})},setSpeaking:e=>{t({isSpeaking:e})},setAutoOpenOnRoute:e=>{t({autoOpenOnRoute:e})},setCloseOnNavigation:e=>{t({closeOnNavigation:e})},markAsRead:()=>{const e=n().messages,r=e[e.length-1];t({hasUnreadMessages:!1,unreadCount:0,lastReadMessageId:r?.id||null}),a.debug("GLOBAL_CHAT","Messages marked as read",{messageCount:e.length,timestamp:new Date().toISOString()})},incrementUnread:()=>{t(e=>({hasUnreadMessages:!0,unreadCount:e.unreadCount+1})),a.debug("GLOBAL_CHAT","Unread count incremented",{newCount:n().unreadCount,timestamp:new Date().toISOString()})},resetUnread:()=>{t({hasUnreadMessages:!1,unreadCount:0}),a.debug("GLOBAL_CHAT","Unread count reset",{timestamp:new Date().toISOString()})},setChatState:e=>{t({chatState:e}),a.debug("GLOBAL_CHAT","Chat state updated",{stateType:e.type,timestamp:new Date().toISOString()})},setIsInStep2:e=>{t({isInStep2:e}),a.debug("GLOBAL_CHAT","Step 2 status updated",{isInStep2:e,timestamp:new Date().toISOString()})},setHasStep2Intro:e=>{t({hasStep2Intro:e}),a.debug("GLOBAL_CHAT","Step 2 intro status updated",{hasIntro:e,timestamp:new Date().toISOString()})},showNotification:e=>{const r={...e,isVisible:!0};t({currentNotification:r}),a.debug("GLOBAL_CHAT","Notification shown",{notificationId:e.id,mode:e.mode,timestamp:new Date().toISOString()})},hideNotification:()=>{const e=n().currentNotification;e&&(t({currentNotification:null}),a.debug("GLOBAL_CHAT","Notification hidden",{notificationId:e.id,timestamp:new Date().toISOString()}))}}),{name:"global-chat-store",storage:K(()=>localStorage),partialize:t=>({currentMode:t.currentMode,position:t.position,closeOnNavigation:t.closeOnNavigation,messages:t.messages.slice(-50)})})),it=R()(q((t,n)=>({conversationId:null,messages:[],conversationState:"intro",context:null,voiceSettings:{voice:"sage",speed:1,volume:.8,enabled:!0},isVoiceActive:!1,isRecording:!1,isProcessing:!1,isSpeaking:!1,exerciseFeedbacks:[],isConnected:!1,error:null,startConversation:e=>{const r=z();t({conversationId:r,context:e,conversationState:"intro",messages:[],exerciseFeedbacks:[],error:null,isConnected:!1}),a.info("COACH_CHAT","Conversation started",{conversationId:r,sessionId:e.sessionId,timestamp:new Date().toISOString()})},endConversation:()=>{const{conversationId:e}=n();t({conversationState:"completed",isVoiceActive:!1,isRecording:!1,isProcessing:!1,isSpeaking:!1,isConnected:!1}),a.info("COACH_CHAT","Conversation ended",{conversationId:e,messageCount:n().messages.length,timestamp:new Date().toISOString()})},resetConversation:()=>{t({conversationId:null,messages:[],conversationState:"intro",context:null,exerciseFeedbacks:[],isVoiceActive:!1,isRecording:!1,isProcessing:!1,isSpeaking:!1,isConnected:!1,error:null}),a.info("COACH_CHAT","Conversation reset",{timestamp:new Date().toISOString()})},addMessage:e=>{const r={...e,id:z(),timestamp:new Date};t(s=>({messages:[...s.messages,r]})),a.debug("COACH_CHAT","Message added",{messageId:r.id,role:r.role,type:r.type,timestamp:new Date().toISOString()})},addSystemMessage:e=>{n().addMessage({role:"system",type:"system",content:e})},setConversationState:e=>{t({conversationState:e}),a.debug("COACH_CHAT","Conversation state changed",{newState:e,timestamp:new Date().toISOString()})},updateContext:e=>{t(r=>({context:r.context?{...r.context,...e}:null}))},setVoiceSettings:e=>{t(r=>({voiceSettings:{...r.voiceSettings,...e}})),a.debug("COACH_CHAT","Voice settings updated",{settings:e,timestamp:new Date().toISOString()})},toggleVoice:()=>{t(e=>({voiceSettings:{...e.voiceSettings,enabled:!e.voiceSettings.enabled},isVoiceActive:e.voiceSettings.enabled?!1:e.isVoiceActive}))},setRecording:e=>{t({isRecording:e})},setProcessing:e=>{t({isProcessing:e})},setSpeaking:e=>{t({isSpeaking:e})},addExerciseFeedback:e=>{t(r=>({exerciseFeedbacks:[...r.exerciseFeedbacks,e]})),a.debug("COACH_CHAT","Exercise feedback added",{exerciseId:e.exerciseId,action:e.action,timestamp:new Date().toISOString()})},clearExerciseFeedbacks:()=>{t({exerciseFeedbacks:[]})},setConnected:e=>{t({isConnected:e}),a.debug("COACH_CHAT","Connection status changed",{connected:e,timestamp:new Date().toISOString()})},setError:e=>{t({error:e}),e&&a.error("COACH_CHAT","Error occurred",{error:e,timestamp:new Date().toISOString()})}}),{name:"coach-chat-store",storage:K(()=>localStorage),partialize:t=>({voiceSettings:t.voiceSettings,messages:t.messages.slice(-20)})})),Ge={week:"last7Days",month:"last30Days",quarter:"last3Months"},ot=R((t,n)=>({selectedPeriod:"week",setSelectedPeriod:e=>{t({selectedPeriod:e})},getApiPeriod:()=>{const{selectedPeriod:e}=n();return Ge[e]}})),ne=10,A=[{id:"photo",title:"Capture Photos",subtitle:"Capturez vos ingrédients disponibles",icon:"Camera",color:"#EC4899",startProgress:0},{id:"analyze",title:"Analyse IA",subtitle:"La Forge Spatiale analyse vos ingrédients",icon:"Zap",color:"#18E3FF",startProgress:33},{id:"complement",title:"Suggestions IA",subtitle:"Ajoutez des ingrédients complémentaires recommandés",icon:"Plus",color:"#8B5CF6",startProgress:66},{id:"validation",title:"Validation Client",subtitle:"Confirmez et ajustez les ingrédients détectés",icon:"Edit",color:"#F59E0B",startProgress:100},{id:"generating_recipes",title:"Génération IA",subtitle:"La Forge Spatiale crée vos recettes personnalisées",icon:"Zap",color:"#10B981",startProgress:120},{id:"recipes",title:"Recettes Générées",subtitle:"Découvrez vos recettes personnalisées",icon:"ChefHat",color:"#F59E0B",startProgress:140}],Ue="twinforge:fridge-scan:pipeline",xe=(t,n)=>({startProgressSimulation:(e,r,s)=>{const o=n();o.stopProgressSimulation(),a.info("FRIDGE_SCAN_PIPELINE","Starting progress simulation",{sessionId:o.currentSessionId,stepsCount:e.length,phaseStartPercentage:r,phaseEndPercentage:s,timestamp:new Date().toISOString()});let l=0;t({simulatedLoadingStep:0,simulatedScanProgress:0,simulatedOverallProgress:r});const i=()=>{if(l<e.length){const c=e[l];t({simulatedLoadingStep:l});const u=100/(c.duration/100);let g=0;const p=setInterval(()=>{g+=u;const d=Math.min(100,g),S=1/e.length,h=l/e.length*100;(l+1)/e.length*100;const O=h+d/100*S*100,N=r+O/100*(s-r);if(t({simulatedScanProgress:d,simulatedOverallProgress:Math.min(s,N)}),d>=100){clearInterval(p),l++;const x=setTimeout(()=>{i()},200);t({progressTimeoutId:x})}},100);t({progressIntervalId:p})}else t({simulatedScanProgress:100,simulatedOverallProgress:s,progressIntervalId:null,progressTimeoutId:null}),a.info("FRIDGE_SCAN_PIPELINE","Progress simulation completed",{sessionId:o.currentSessionId,finalOverallProgress:s,timestamp:new Date().toISOString()})};i()},stopProgressSimulation:()=>{const e=n();e.progressIntervalId&&clearInterval(e.progressIntervalId),e.progressTimeoutId&&clearTimeout(e.progressTimeoutId),t({progressIntervalId:null,progressTimeoutId:null,simulatedLoadingStep:0,simulatedScanProgress:0}),a.debug("FRIDGE_SCAN_PIPELINE","Progress simulation stopped",{sessionId:e.currentSessionId,timestamp:new Date().toISOString()})}}),je=(t,n)=>({addCapturedPhotos:e=>{const r=n().capturedPhotos;a.debug("FRIDGE_SCAN_PIPELINE","Adding captured photos",{sessionId:n().currentSessionId,currentPhotosCount:r.length,newPhotosCount:e.length,timestamp:new Date().toISOString()});const s=A.find(o=>o.id==="analyze");t({capturedPhotos:[...n().capturedPhotos,...e],simulatedOverallProgress:s?.startProgress||20}),a.debug("FRIDGE_SCAN_PIPELINE","Captured photos updated",{sessionId:n().currentSessionId,totalPhotosCount:n().capturedPhotos.length,timestamp:new Date().toISOString()}),a.info("FRIDGE_SCAN_PIPELINE","Photos uploaded",{sessionId:n().currentSessionId,photosCount:e.length,timestamp:new Date().toISOString()})},removeCapturedPhoto:e=>{const r=n(),s=r.capturedPhotos.filter((o,l)=>l!==e);t({capturedPhotos:s}),a.debug("FRIDGE_SCAN_PIPELINE","Photo removed",{sessionId:r.currentSessionId,photoIndex:e,remainingPhotos:s.length,timestamp:new Date().toISOString()})}}),qe=(t,n)=>({processVisionResults:(e,r)=>{n().stopProgressSimulation();const s=A.find(l=>l.id==="validation");let o="validation";e.length<ne&&r&&r.length>0&&(o="complement"),t({rawDetectedItems:e,userEditedInventory:e,suggestedComplementaryItems:r||[],currentStep:o,loadingState:"idle",loadingMessage:"Analyse terminée avec succès",simulatedOverallProgress:s?.startProgress||40,simulatedScanProgress:0,simulatedLoadingStep:0}),n().goToStep(o),a.info("FRIDGE_SCAN_PIPELINE","Vision results processed",{sessionId:n().currentSessionId,itemsDetected:e.length,suggestedItemsCount:r?.length||0,timestamp:new Date().toISOString()})},updateInventory:async e=>{t({userEditedInventory:e}),a.debug("FRIDGE_SCAN_PIPELINE","Inventory updated by user",{sessionId:n().currentSessionId,inventoryCount:e.length,timestamp:new Date().toISOString()}),await n().saveSessionToSupabase()},setSuggestedComplementaryItems:e=>{t({suggestedComplementaryItems:e}),a.debug("FRIDGE_SCAN_PIPELINE","Suggested complementary items set",{sessionId:n().currentSessionId,suggestedItemsCount:e.length,timestamp:new Date().toISOString()})},addSelectedComplementaryItems:async e=>{const s=[...n().userEditedInventory,...e];t({userEditedInventory:s}),a.info("FRIDGE_SCAN_PIPELINE","Selected complementary items added to inventory",{sessionId:n().currentSessionId,addedItemsCount:e.length,totalInventoryCount:s.length,timestamp:new Date().toISOString()}),await n().saveSessionToSupabase()}}),He=(t,n)=>({_triggerImageGenerationForRecipes:async(e,r)=>{if(!e.length)return;const o=n().recipeCandidates.map(c=>e.find(g=>g.id===c.id)?{...c,isGeneratingImage:!0}:c);t({recipeCandidates:o});const{supabase:l}=await w(async()=>{const{supabase:c}=await import("./page-fridge-BvAjnJpI.js").then(u=>u.j);return{supabase:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),{data:{session:i}}=await l.auth.getSession();if(!i?.access_token){a.error("FRIDGE_SCAN_PIPELINE","No authenticated session for image generation",{sessionId:r,timestamp:new Date().toISOString()});return}a.info("FRIDGE_SCAN_PIPELINE","Starting background image generation for recipes",{sessionId:r,recipeCount:e.length,recipeIds:e.map(c=>c.id),timestamp:new Date().toISOString()});for(const c of e)try{const u=`recipe-${c.id}-${Date.now()}`,g={user_id:i.user.id,recipe_id:c.id,image_signature:u,recipe_details:{session_id:r,title:c.title,description:c.description||"",ingredients:c.ingredients.slice(0,5).map(d=>d.name),dietary_tags:c.dietary_tags}},p=await fetch("https://kwipydbtjagypocpvbwn.supabase.co/functions/v1/image-generator",{method:"POST",headers:{Authorization:`Bearer ${i.access_token}`,"Content-Type":"application/json"},body:JSON.stringify(g)});if(p.ok){const d=await p.json();a.info("FRIDGE_SCAN_PIPELINE","Image generation initiated successfully",{sessionId:r,recipeId:c.id,imageSignature:u,imageUrl:d.image_url,timestamp:new Date().toISOString()}),n().updateRecipeImageUrlInCandidates(c.id,d.image_url,!1)}else{const d=await p.text();throw new Error(`HTTP error! status: ${p.status}, message: ${d}`)}}catch(u){a.error("FRIDGE_SCAN_PIPELINE","Image generation failed for recipe",{sessionId:r,recipeId:c.id,recipeTitle:c.title,error:u instanceof Error?u.message:"Unknown error",errorDetails:u instanceof Error&&u.message.includes("HTTP error!")?u.message:void 0,timestamp:new Date().toISOString()}),n().updateRecipeImageUrlInCandidates(c.id,void 0,!1,!0)}},updateRecipeImageUrlInCandidates:(e,r,s=!1,o=!1)=>{const i=n().recipeCandidates.map(c=>c.id===e?{...c,imageUrl:r,isGeneratingImage:s,imageGenerationError:o}:c);t({recipeCandidates:i})},generateRecipes:async()=>{const e=n();a.info("FRIDGE_SCAN_PIPELINE","Starting generateRecipes - Initial state",{sessionId:e.currentSessionId,userEditedInventoryCount:e.userEditedInventory?.length||0,userEditedInventory:e.userEditedInventory,timestamp:new Date().toISOString()});let r=e.userEditedInventory;if(!r||r.length===0){a.info("FRIDGE_SCAN_PIPELINE","No userEditedInventory found, attempting to get from meal plan store",{sessionId:e.currentSessionId,timestamp:new Date().toISOString()});try{const{useMealPlanStore:o}=await w(async()=>{const{useMealPlanStore:c}=await Promise.resolve().then(()=>te);return{useMealPlanStore:c}},void 0),l=o.getState();a.info("FRIDGE_SCAN_PIPELINE","Meal plan store state retrieved",{sessionId:e.currentSessionId,selectedInventoryId:l.selectedInventoryId,availableInventoriesCount:l.availableInventories?.length||0,availableInventories:l.availableInventories?.map(c=>({id:c.id,itemCount:c.inventory_final?.length||0,createdAt:c.createdAt})),timestamp:new Date().toISOString()});const i=l.selectedInventoryId&&l.availableInventories?l.availableInventories.find(c=>c.id===l.selectedInventoryId):null;i&&i.inventory_final&&i.inventory_final.length>0?(r=i.inventory_final,t({userEditedInventory:r}),a.info("FRIDGE_SCAN_PIPELINE","Using inventory from meal plan store",{sessionId:e.currentSessionId,selectedInventoryId:l.selectedInventoryId,inventoryCount:r.length,inventoryItems:r.map(c=>({name:c.name,category:c.category,quantity:c.quantity})),timestamp:new Date().toISOString()})):a.warn("FRIDGE_SCAN_PIPELINE","Meal plan store has no selected inventory",{sessionId:e.currentSessionId,selectedInventoryId:l.selectedInventoryId,availableInventoriesCount:l.availableInventories?.length||0,foundSelectedInventory:!!i,selectedInventoryLength:i?.inventory_final?.length||0,timestamp:new Date().toISOString()})}catch(o){a.warn("FRIDGE_SCAN_PIPELINE","Failed to get inventory from meal plan store",{sessionId:e.currentSessionId,error:o instanceof Error?o.message:"Unknown error",errorStack:o instanceof Error?o.stack:void 0,timestamp:new Date().toISOString()})}}if(a.info("FRIDGE_SCAN_PIPELINE","Final inventory state before validation",{sessionId:e.currentSessionId,inventoryToUseExists:!!r,inventoryToUseCount:r?.length||0,inventoryToUse:r?.map(o=>({name:o.name,category:o.category,quantity:o.quantity,freshnessScore:o.freshnessScore})),timestamp:new Date().toISOString()}),!r||r.length===0){const o="Aucun ingrédient disponible pour générer des recettes. Veuillez d'abord scanner votre frigo ou sélectionner un inventaire.";throw a.error("FRIDGE_SCAN_PIPELINE","No inventory available for recipe generation",{sessionId:e.currentSessionId,userEditedInventoryCount:e.userEditedInventory.length,finalInventoryToUseCount:r?.length||0,timestamp:new Date().toISOString()}),t({loadingState:"idle",loadingMessage:"",recipeCandidates:[]}),new Error(o)}const s=A.find(o=>o.id==="generating_recipes");t({currentStep:"generating_recipes",loadingState:"generating",loadingMessage:"La Forge Spatiale crée vos recettes personnalisées...",simulatedOverallProgress:s?.startProgress||60});try{a.info("FRIDGE_SCAN_PIPELINE","Starting streaming recipe generation",{sessionId:e.currentSessionId,inventoryCount:r.length,aiModel:"gpt-4o-mini",streamingEnabled:!0,timestamp:new Date().toISOString()});const o=A.find(f=>f.id==="recipes");t({recipeCandidates:[],currentStep:"recipes",loadingState:"streaming",loadingMessage:"Génération des recettes en cours...",simulatedOverallProgress:o?.startProgress||80,simulatedScanProgress:0,simulatedLoadingStep:0}),n().stopProgressSimulation();const{useUserStore:l}=await w(async()=>{const{useUserStore:f}=await Promise.resolve().then(()=>ee);return{useUserStore:f}},void 0),i=l.getState().profile,c=l.getState().session?.user?.id;if(!c)throw new Error("User must be authenticated to generate recipes");const{supabase:u}=await w(async()=>{const{supabase:f}=await import("./page-fridge-BvAjnJpI.js").then(v=>v.j);return{supabase:f}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9]));let g=[];try{const{data:f}=await u.from("recipe_sessions").select(`
            recipes (
              title,
              ingredients
            )
          `).eq("user_id",c).order("created_at",{ascending:!1}).limit(20);f&&(g=f.flatMap(v=>v.recipes||[]).map(v=>({title:v.title,main_ingredients:v.ingredients?.slice(0,3).map(m=>m.name)||[]})))}catch(f){a.warn("FRIDGE_SCAN_PIPELINE","Failed to fetch existing recipes",{sessionId:e.currentSessionId,error:f instanceof Error?f.message:"Unknown error",timestamp:new Date().toISOString()})}const p={nutrition:{diet:i?.nutrition?.diet||"",allergies:i?.nutrition?.allergies||[],intolerances:i?.nutrition?.intolerances||[],budgetLevel:i?.nutrition?.budgetLevel||"medium",proteinTarget_g:i?.nutrition?.proteinTarget_g||void 0,disliked:i?.nutrition?.disliked||[]},household_details:{adults:i?.householdDetails?.adults||1,children:i?.householdDetails?.children||0,dietaryRestrictions:i?.householdDetails?.dietaryRestrictions||[]},meal_prep_preferences:{weekdayTimeMin:i?.mealPrepPreferences?.weekdayTimeMin||30,weekendTimeMin:i?.mealPrepPreferences?.weekendTimeMin||60,cookingSkill:i?.mealPrepPreferences?.cookingSkill||"intermediate",preferredMealTimes:i?.mealPrepPreferences?.preferredMealTimes||{}},kitchen_equipment:{oven:i?.kitchenEquipment?.oven??!0,stove:i?.kitchenEquipment?.stove??!0,microwave:i?.kitchenEquipment?.microwave??!0,airFryer:i?.kitchenEquipment?.airFryer??!1,slowCooker:i?.kitchenEquipment?.slowCooker??!1,blender:i?.kitchenEquipment?.blender??!1,foodProcessor:i?.kitchenEquipment?.foodProcessor??!1,standMixer:i?.kitchenEquipment?.standMixer??!1,riceCooker:i?.kitchenEquipment?.riceCooker??!1,grill:i?.kitchenEquipment?.grill??!1,steamBasket:i?.kitchenEquipment?.steamBasket??!1,pressureCooker:i?.kitchenEquipment?.pressureCooker??!1},food_preferences:{cuisines:i?.foodPreferences?.cuisines||[],ingredients:i?.foodPreferences?.ingredients||[],flavors:i?.foodPreferences?.flavors||[]},sensory_preferences:{spiceTolerance:i?.sensoryPreferences?.spiceTolerance||1,textureAversions:i?.sensoryPreferences?.textureAversions||[],temperaturePreferences:i?.sensoryPreferences?.temperaturePreferences||[]},macro_targets:{kcal:i?.macroTargets?.kcal||void 0,fiberMinG:i?.macroTargets?.fiberMinG||void 0,sugarMaxG:i?.macroTargets?.sugarMaxG||void 0,saltMaxMg:i?.macroTargets?.saltMaxMg||void 0,carbsMaxG:i?.macroTargets?.carbsMaxG||void 0,fatMinG:i?.macroTargets?.fatMinG||void 0},shopping_preferences:{frequencyPerWeek:i?.shoppingPreferences?.frequencyPerWeek||2,defaultPortionsPerMeal:i?.shoppingPreferences?.defaultPortionsPerMeal||2,batchCooking:i?.shoppingPreferences?.batchCooking||"sometimes",bias:i?.shoppingPreferences?.bias||[],preferredStores:i?.shoppingPreferences?.preferredStores||[],budgetPerWeek:i?.shoppingPreferences?.budgetPerWeek||void 0},user_identity:{sex:i?.sex||"male",height_cm:i?.height_cm||175,weight_kg:i?.weight_kg||70,activity_level:i?.activity_level||"moderate",objective:i?.objective||"recomp"}},d=await fetch("https://kwipydbtjagypocpvbwn.supabase.co/functions/v1/recipe-generator",{method:"POST",headers:{Authorization:"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aXB5ZGJ0amFneXBvY3B2YnduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2ODg0MjIsImV4cCI6MjA3MDI2NDQyMn0.IS5IdKbmnGtgU_AaGYtUgX3ewaNpsiSAui5kbFV31_U","Content-Type":"application/json"},body:JSON.stringify({inventory_final:r.map(f=>({name:f.name,category:f.category,quantity:f.quantity,freshness:f.freshnessScore>70?"Excellent":f.freshnessScore>40?"Bon":"À utiliser rapidement"})),user_preferences:p,filters:{},user_id:c,existing_recipes:g})});if(!d.ok)throw new Error(`HTTP error! status: ${d.status}`);if(!d.body)throw new Error("Response body is null");const S=d.body.getReader(),h=new TextDecoder;let O="",N=0;const x=(f,v)=>{if(f==="skeleton")try{const P=JSON.parse(v).recipe_count||4;a.info("FRIDGE_SCAN_PIPELINE","Received skeleton count",{sessionId:e.currentSessionId,skeletonCount:P,timestamp:new Date().toISOString()});const D=Array.from({length:P},(k,E)=>({id:`placeholder-${E}-${Date.now()}`,sessionId:e.currentSessionId,title:"",description:"",ingredients:[],instructions:[],prepTimeMin:0,cookTimeMin:0,servings:0,dietaryTags:[],nutritionalInfo:{calories:0,protein:0,carbs:0,fat:0},imageUrl:void 0,imageSignature:void 0,reasons:[],createdAt:new Date().toISOString(),status:"loading",isGeneratingImage:!0}));t({recipeCandidates:D})}catch(m){a.error("FRIDGE_SCAN_PIPELINE","Error parsing skeleton event",{sessionId:e.currentSessionId,error:m instanceof Error?m.message:"Unknown error",timestamp:new Date().toISOString()})}else if(f==="recipe")try{const m=v.trim(),P=m.indexOf("{"),D=m.lastIndexOf("}");if(P===-1||D===-1||P>=D)throw new Error("Invalid JSON structure in recipe data");const k=m.substring(P,D+1),E=JSON.parse(k),_={id:E.id||crypto.randomUUID(),sessionId:e.currentSessionId,title:E.title,description:E.description,ingredients:E.ingredients||[],instructions:E.instructions||[],prepTimeMin:E.prep_time_min||0,cookTimeMin:E.cook_time_min||0,servings:E.servings||2,dietaryTags:E.dietary_tags||[],nutritionalInfo:E.nutritional_info||{},imageUrl:void 0,imageSignature:E.image_signature,reasons:E.reasons||[],createdAt:new Date().toISOString(),status:"ready",isGeneratingImage:!1};N++,a.info("FRIDGE_SCAN_PIPELINE","Received recipe via SSE",{sessionId:e.currentSessionId,recipeId:_.id,recipeTitle:_.title,totalReceived:N,timestamp:new Date().toISOString()});const b=n().recipeCandidates,j=b.findIndex(F=>F.status==="loading"&&F.title==="");let M;j!==-1?(M=[...b],M[j]={...M[j],..._,status:"ready",isGeneratingImage:!0}):M=[...b,_],t({recipeCandidates:M}),n()._triggerImageGenerationForRecipes([_],e.currentSessionId)}catch(m){a.error("FRIDGE_SCAN_PIPELINE","Error parsing recipe event",{sessionId:e.currentSessionId,error:m instanceof Error?m.message:"Unknown error",rawData:v,timestamp:new Date().toISOString()})}else if(f==="complete")try{const m=JSON.parse(v);a.info("FRIDGE_SCAN_PIPELINE","Recipe generation completed via SSE",{sessionId:e.currentSessionId,totalRecipesReceived:N,processingTimeMs:m.processing_time_ms,costUsd:m.cost_usd,cacheHit:m.cache_hit,aiModel:"gpt-4o-mini",inputTokens:m.input_tokens,outputTokens:m.output_tokens,timestamp:new Date().toISOString()}),t({loadingState:"idle",loadingMessage:"",isActive:!1})}catch(m){a.error("FRIDGE_SCAN_PIPELINE","Error parsing complete event",{sessionId:e.currentSessionId,error:m instanceof Error?m.message:"Unknown error",timestamp:new Date().toISOString()})}else if(f==="error")try{const m=JSON.parse(v);throw a.error("FRIDGE_SCAN_PIPELINE","SSE error event received",{sessionId:e.currentSessionId,error:m.error||"Unknown SSE error",timestamp:new Date().toISOString()}),t({loadingState:"idle",loadingMessage:"",recipeCandidates:[]}),new Error(m.error||"Recipe generation failed via SSE")}catch(m){throw a.error("FRIDGE_SCAN_PIPELINE","Error parsing SSE error event",{sessionId:e.currentSessionId,error:m instanceof Error?m.message:"Unknown error",timestamp:new Date().toISOString()}),new Error("Recipe generation failed")}};a.info("FRIDGE_SCAN_PIPELINE","SSE connection opened",{sessionId:e.currentSessionId,timestamp:new Date().toISOString()});try{for(;;){const{done:f,value:v}=await S.read();if(f)break;O+=h.decode(v,{stream:!0});const m=O.split(`
`);O=m.pop()||"";let P="",D="";for(const k of m)k.startsWith("event: ")?P=k.slice(7).trim():k.startsWith("data: ")?D=k.slice(6):k===""&&P&&D&&(x(P,D),P="",D="")}}catch(f){throw a.error("FRIDGE_SCAN_PIPELINE","Stream reading error",{sessionId:e.currentSessionId,error:f instanceof Error?f.message:"Unknown stream error",timestamp:new Date().toISOString()}),t({loadingState:"idle",loadingMessage:"",recipeCandidates:[]}),new Error("Failed to read recipe generation stream")}finally{S.releaseLock()}}catch(o){throw a.error("FRIDGE_SCAN_PIPELINE","Recipe generation failed",{error:o instanceof Error?o.message:"Unknown error",sessionId:e.currentSessionId,costUsd:0,aiModel:"gpt-4o-mini",timestamp:new Date().toISOString()}),t({loadingState:"idle",loadingMessage:"",recipeCandidates:[]}),o}}}),Be=(t,n)=>({...He(t,n)}),We=(t,n)=>({saveSessionToSupabase:async()=>{const e=n();if(!e.currentSessionId){a.warn("FRIDGE_SCAN_PIPELINE","Cannot save session: no session ID");return}try{const{useUserStore:r}=await w(async()=>{const{useUserStore:c}=await Promise.resolve().then(()=>ee);return{useUserStore:c}},void 0),s=r.getState().session?.user?.id;if(!s){a.warn("FRIDGE_SCAN_PIPELINE","Cannot save session: no user ID");return}const{supabase:o}=await w(async()=>{const{supabase:c}=await import("./page-fridge-BvAjnJpI.js").then(u=>u.j);return{supabase:c}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),l={session_id:e.currentSessionId,user_id:s,stage:e.currentStep,captured_photos:e.capturedPhotos,raw_detected_items:e.rawDetectedItems,user_edited_inventory:e.userEditedInventory,suggested_complementary_items:e.suggestedComplementaryItems,recipe_candidates:e.recipeCandidates,selected_recipes:e.selectedRecipes,meal_plan:e.mealPlan,metadata:{simulatedOverallProgress:e.simulatedOverallProgress,loadingState:e.loadingState},completed:e.simulatedOverallProgress>=100,updated_at:new Date().toISOString()},{error:i}=await o.from("fridge_scan_sessions").upsert(l,{onConflict:"session_id"});if(i){if(i.code==="PGRST205"||i.message?.includes("does not exist")){a.debug("FRIDGE_SCAN_PIPELINE","fridge_scan_sessions table not found, skipping save");return}throw i}a.debug("FRIDGE_SCAN_PIPELINE","Session saved to Supabase",{sessionId:e.currentSessionId,stage:e.currentStep,itemsCount:e.userEditedInventory.length})}catch(r){a.warn("FRIDGE_SCAN_PIPELINE","Failed to save session to Supabase",{error:r instanceof Error?r.message:"Unknown error",sessionId:e.currentSessionId})}},startScan:async()=>{const e=crypto.randomUUID();a.info("FRIDGE_SCAN_PIPELINE","Force resetting pipeline before new scan",{previousStep:n().currentStep,previousSessionId:n().currentSessionId,wasActive:n().isActive,timestamp:new Date().toISOString()});const r=A.find(s=>s.id==="photo");t({currentStep:"photo",isActive:!0,currentSessionId:e,simulatedOverallProgress:r?.startProgress||0,capturedPhotos:[],rawDetectedItems:[],userEditedInventory:[],recipeCandidates:[],selectedRecipes:[],loadingState:"idle",loadingMessage:""}),a.info("FRIDGE_SCAN_PIPELINE","Fridge scan session started",{sessionId:e,resetComplete:!0,timestamp:new Date().toISOString()}),await n().saveSessionToSupabase()},saveRecipeSession:async()=>{const e=n();t({loadingState:"saving",loadingMessage:"Sauvegarde de votre atelier de recettes..."});try{a.info("FRIDGE_SCAN_PIPELINE","Saving recipe session",{sessionId:e.currentSessionId,selectedRecipesCount:e.selectedRecipes.length,inventoryCount:e.userEditedInventory.length,timestamp:new Date().toISOString()});const{useUserStore:r}=await w(async()=>{const{useUserStore:g}=await Promise.resolve().then(()=>ee);return{useUserStore:g}},void 0),s=r.getState().profile,o=r.getState().session?.user?.id;if(!o||!e.currentSessionId)throw new Error("User ID or session ID missing");const{supabase:l}=await w(async()=>{const{supabase:g}=await import("./page-fridge-BvAjnJpI.js").then(p=>p.j);return{supabase:g}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),i={nutrition:s?.nutrition||{},householdDetails:s?.householdDetails||{},mealPrepPreferences:s?.mealPrepPreferences||{},kitchenEquipment:s?.kitchenEquipment||{},foodPreferences:s?.foodPreferences||{},sensoryPreferences:s?.sensoryPreferences||{},macroTargets:s?.macroTargets||{},shoppingPreferences:s?.shoppingPreferences||{}},{data:c,error:u}=await l.from("recipe_sessions").upsert({id:e.currentSessionId,user_id:o,inventory_final:e.userEditedInventory,selected_recipe_ids:e.selectedRecipes.map(g=>g.id),preferences_snapshot:i,filters_snapshot:{},status:"completed",created_at:new Date().toISOString(),updated_at:new Date().toISOString()}).select().single();if(u)throw new Error(`Failed to save session: ${u.message}`);if(e.selectedRecipes.length>0){const g=e.selectedRecipes.map(d=>({id:d.id,session_id:e.currentSessionId,title:d.title,description:d.description,ingredients:d.ingredients,instructions:d.instructions,prep_time_min:d.prepTimeMin,cook_time_min:d.cookTimeMin,servings:d.servings,dietary_tags:d.dietaryTags,nutritional_info:d.nutritionalInfo,...d.imageUrl&&{image_url:d.imageUrl},image_signature:d.imageSignature,reasons:d.reasons,created_at:d.createdAt,updated_at:d.updatedAt})),{error:p}=await l.from("recipes").upsert(g);p&&a.warn("FRIDGE_SCAN_PIPELINE","Failed to save some recipes",{error:p.message,sessionId:e.currentSessionId,recipesCount:g.length})}a.info("FRIDGE_SCAN_PIPELINE","Recipe session saved successfully",{sessionId:e.currentSessionId,savedRecipesCount:e.selectedRecipes.length,timestamp:new Date().toISOString()});try{const{useMealPlanStore:g}=await w(async()=>{const{useMealPlanStore:p}=await Promise.resolve().then(()=>te);return{useMealPlanStore:p}},void 0);await g.getState().loadAvailableInventories(),g.getState().selectInventory(e.currentSessionId),a.info("FRIDGE_SCAN_PIPELINE","Meal plan store updated with new inventory",{sessionId:e.currentSessionId,timestamp:new Date().toISOString()})}catch(g){a.warn("FRIDGE_SCAN_PIPELINE","Failed to update meal plan store",{error:g instanceof Error?g.message:"Unknown error",sessionId:e.currentSessionId,timestamp:new Date().toISOString()})}t({loadingState:"idle",loadingMessage:"Session sauvegardée avec succès",simulatedOverallProgress:100})}catch(r){throw a.error("FRIDGE_SCAN_PIPELINE","Recipe session save failed",{error:r instanceof Error?r.message:"Unknown error",sessionId:e.currentSessionId,timestamp:new Date().toISOString()}),t({loadingState:"idle",loadingMessage:"Erreur lors de la sauvegarde"}),r}finally{n().stopProgressSimulation()}return e.currentSessionId},resetPipeline:()=>{const e=n();e.stopProgressSimulation(),a.info("FRIDGE_SCAN_PIPELINE","Resetting pipeline completely",{previousStep:e.currentStep,previousSessionId:e.currentSessionId,wasActive:e.isActive,hadCapturedPhotos:e.capturedPhotos.length,hadInventory:e.userEditedInventory.length,loadingState:e.loadingState,timestamp:new Date().toISOString()}),t({currentStep:"photo",isActive:!1,currentSessionId:null,simulatedLoadingStep:0,simulatedScanProgress:0,simulatedOverallProgress:0,progressIntervalId:null,progressTimeoutId:null,capturedPhotos:[],rawDetectedItems:[],userEditedInventory:[],loadingState:"idle",loadingMessage:""}),a.info("FRIDGE_SCAN_PIPELINE","Pipeline reset",{resetComplete:!0,newStep:"photo",newSessionId:null,allDataCleared:!0,timestamp:new Date().toISOString()})},resumePipeline:async()=>{const e=n();a.info("FRIDGE_SCAN_PIPELINE","Resuming pipeline from persisted state",{currentSessionId:e.currentSessionId,currentStep:e.currentStep,isActive:e.isActive,hasInventory:e.userEditedInventory.length>0,timestamp:new Date().toISOString()});let r="photo";e.userEditedInventory.length>0?r="validation":e.suggestedComplementaryItems.length>0&&e.rawDetectedItems.length<ne?r="complement":e.rawDetectedItems.length>0?r="validation":e.capturedPhotos.length>0&&(r="analyze");const s=A.find(o=>o.id===r);if(t({isActive:!0,currentStep:r,simulatedOverallProgress:s?.startProgress||0,loadingState:"idle",loadingMessage:""}),e.currentSessionId&&e.userEditedInventory.length>0)try{const{useMealPlanStore:o}=await w(async()=>{const{useMealPlanStore:l}=await Promise.resolve().then(()=>te);return{useMealPlanStore:l}},void 0);await o.getState().loadAvailableInventories(),o.getState().selectInventory(e.currentSessionId),a.info("FRIDGE_SCAN_PIPELINE","Meal plan store updated on resume",{sessionId:e.currentSessionId,inventoryCount:e.userEditedInventory.length,timestamp:new Date().toISOString()})}catch(o){a.warn("FRIDGE_SCAN_PIPELINE","Failed to update meal plan store on resume",{error:o instanceof Error?o.message:"Unknown error",sessionId:e.currentSessionId,timestamp:new Date().toISOString()})}a.info("FRIDGE_SCAN_PIPELINE","Pipeline resumed successfully",{sessionId:e.currentSessionId,resumedToStep:r,progress:s?.startProgress||0,timestamp:new Date().toISOString()})},startRecipeGenerationFromInventory:async e=>{try{a.info("FRIDGE_SCAN_PIPELINE","Starting recipe generation from inventory",{inventoryCount:e?.length||0,timestamp:new Date().toISOString()});const r=crypto.randomUUID();t({currentSessionId:r,isActive:!0,currentStep:"validation",userEditedInventory:e,rawDetectedItems:e,simulatedOverallProgress:66,loadingState:"idle",loadingMessage:""}),a.info("FRIDGE_SCAN_PIPELINE","Recipe generation from inventory started successfully",{sessionId:r,inventoryCount:e?.length||0,currentStep:"validation",timestamp:new Date().toISOString()})}catch(r){throw a.error("FRIDGE_SCAN_PIPELINE","Failed to start recipe generation from inventory",{error:r instanceof Error?r.message:"Unknown error",inventoryCount:e?.length||0,timestamp:new Date().toISOString()}),r}}}),Ve=(t,n)=>({goToStep:async e=>{const r=A.find(o=>o.id===e),s={currentStep:e,simulatedOverallProgress:r?.startProgress||0};t(s),await n().saveSessionToSupabase()},nextStep:()=>{const e=n(),r=A.findIndex(s=>s.id===e.currentStep);r<A.length-1&&t({currentStep:A[r+1].id})},previousStep:()=>{const e=n(),r=A.findIndex(s=>s.id===e.currentStep);r>0&&t({currentStep:A[r-1].id})}}),lt=R()(q((t,n)=>({currentStep:"photo",isActive:!1,currentSessionId:null,simulatedLoadingStep:0,simulatedScanProgress:0,simulatedOverallProgress:0,progressIntervalId:null,progressTimeoutId:null,capturedPhotos:[],rawDetectedItems:[],userEditedInventory:[],suggestedComplementaryItems:[],recipeCandidates:[],selectedRecipes:[],recentSessions:[],externalGenerationTriggered:!1,mealPlan:null,loadingState:"idle",loadingMessage:"",steps:A,...xe(t,n),...je(t,n),...qe(t,n),...Be(t,n),...We(t,n),...Ve(t,n),setExternalGenerationTriggered:e=>{t({externalGenerationTriggered:e})},setLoadingState:e=>{t({loadingState:e}),a.debug("FRIDGE_SCAN_PIPELINE","Loading state updated",{newLoadingState:e,timestamp:new Date().toISOString()})},setUserEditedInventory:e=>{t({userEditedInventory:e}),a.debug("FRIDGE_SCAN_PIPELINE","User edited inventory set explicitly",{inventoryCount:e.length,timestamp:new Date().toISOString()})},clearRecipeCandidates:()=>{t({recipeCandidates:[]}),a.info("FRIDGE_SCAN_PIPELINE","Recipe candidates cleared",{sessionId:n().currentSessionId,timestamp:new Date().toISOString()})},loadRecentSessions:async()=>{try{const{supabase:e}=await w(async()=>{const{supabase:i}=await import("./page-fridge-BvAjnJpI.js").then(c=>c.j);return{supabase:i}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),{data:{user:r}}=await e.auth.getUser();if(!r){a.warn("FRIDGE_SCAN_PIPELINE","No user found, cannot load recent sessions"),t({recentSessions:[]});return}const{data:s,error:o}=await e.from("fridge_scan_sessions").select("session_id, user_id, stage, created_at, updated_at, captured_photos, raw_detected_items").eq("user_id",r.id).order("created_at",{ascending:!1}).limit(10);if(o){if(o.code==="PGRST205"||o.message?.includes("does not exist")){a.warn("FRIDGE_SCAN_PIPELINE","fridge_scan_sessions table not found (migration pending)",{code:o.code,message:o.message}),t({recentSessions:[]});return}a.error("FRIDGE_SCAN_PIPELINE","Failed to load recent sessions",{error:o.message,code:o.code}),t({recentSessions:[]});return}const l=(s||[]).map(i=>({sessionId:i.session_id,userId:i.user_id,stage:i.stage,createdAt:i.created_at,updatedAt:i.updated_at,capturedPhotos:i.captured_photos,rawDetectedItems:i.raw_detected_items}));t({recentSessions:l}),a.info("FRIDGE_SCAN_PIPELINE","Recent sessions loaded",{count:l.length,timestamp:new Date().toISOString()})}catch(e){a.warn("FRIDGE_SCAN_PIPELINE","Exception loading recent sessions",{error:e instanceof Error?e.message:"Unknown error",errorType:e instanceof Error?e.constructor.name:typeof e}),t({recentSessions:[]})}}}),{name:Ue,storage:K(()=>localStorage),partialize:t=>{const n={currentStep:t.currentStep,isActive:t.isActive,currentSessionId:t.currentSessionId,simulatedLoadingStep:t.simulatedLoadingStep,simulatedScanProgress:t.simulatedScanProgress,simulatedOverallProgress:t.simulatedOverallProgress,rawDetectedItems:t.rawDetectedItems,userEditedInventory:t.userEditedInventory,mealPlan:t.mealPlan};return a.debug("FRIDGE_SCAN_PIPELINE_STORE","Partializing state for persistence",{currentStep:n.currentStep,isActive:n.isActive,sessionId:n.currentSessionId,rawDetectedItemsCount:n.rawDetectedItems?.length||0,userEditedInventoryCount:n.userEditedInventory?.length||0,timestamp:new Date().toISOString()}),n},merge:(t,n)=>{const e=t;a.debug("FRIDGE_SCAN_PIPELINE_STORE","Loading persisted data for merge",{persistedStep:e?.currentStep,persistedIsActive:e?.isActive,persistedSessionId:e?.currentSessionId,persistedOverallProgress:e?.simulatedOverallProgress,persistedRawDetectedItemsCount:e?.rawDetectedItems?.length||0,persistedUserEditedInventoryCount:e?.userEditedInventory?.length||0,timestamp:new Date().toISOString()});const r={...e,rawDetectedItems:Array.isArray(e?.rawDetectedItems)?e.rawDetectedItems:[],userEditedInventory:Array.isArray(e?.userEditedInventory)?e.userEditedInventory:[]},s={...n,...r};a.info("FRIDGE_SCAN_PIPELINE_STORE","Hydrating store state from persistence",{persistedStep:e?.currentStep,persistedIsActive:e?.isActive,persistedSessionId:e?.currentSessionId,persistedOverallProgress:e?.simulatedOverallProgress,hasInventory:e?.userEditedInventory?.length>0,timestamp:new Date().toISOString()});const o=e?.currentSessionId&&/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e.currentSessionId);if(o){s.currentSessionId=e.currentSessionId;const l=e?.rawDetectedItems?.length>0||e?.userEditedInventory?.length>0;s.isActive=l,e?.userEditedInventory?.length>0?s.currentStep="validation":e?.suggestedComplementaryItems?.length>0&&(e?.rawDetectedItems?.length||0)<ne?s.currentStep="complement":e?.rawDetectedItems?.length>0?s.currentStep="validation":s.currentStep="photo",a.debug("FRIDGE_SCAN_PIPELINE_STORE","Session validation result",{sessionId:e.currentSessionId,hasPersistedData:l,rawDetectedItemsCount:e?.rawDetectedItems?.length||0,inventoryCount:e?.userEditedInventory?.length||0,setActive:l,determinedStep:s.currentStep})}else s.currentSessionId=null,s.isActive=!1,s.currentStep="photo";if(s.simulatedLoadingStep=0,s.simulatedScanProgress=0,s.progressIntervalId=null,s.progressTimeoutId=null,s.loadingState="idle",s.loadingMessage="",s.currentStep){const l=A.find(i=>i.id===s.currentStep);s.simulatedOverallProgress=l?.startProgress||0,a.debug("FRIDGE_SCAN_PIPELINE_STORE","Setting progress from current step",{currentStep:s.currentStep,foundStepData:!!l,startProgress:l?.startProgress,finalProgress:s.simulatedOverallProgress,timestamp:new Date().toISOString()})}else s.simulatedOverallProgress=0,a.debug("FRIDGE_SCAN_PIPELINE_STORE","Setting progress to 0 (no step)",{currentStep:s.currentStep,timestamp:new Date().toISOString()});return s.steps=n.steps,a.info("FRIDGE_SCAN_PIPELINE_STORE","Store state hydration completed",{finalIsActive:s.isActive,finalCurrentStep:s.currentStep,finalSessionId:s.currentSessionId,finalOverallProgress:s.simulatedOverallProgress,sessionValid:o,hasInventory:s.userEditedInventory?.length>0,timestamp:new Date().toISOString()}),s}})),G=["Analyse du plan de repas...","Calcul des quantités nécessaires...","Génération de la liste intelligente...","Optimisation des catégories...","Ajout de suggestions personnalisées...","Estimation budgétaire en cours..."],$=["Examen détaillé de vos repas planifiés","Adaptation selon vos préférences alimentaires","Intelligence artificielle en action","Organisation par rayons de magasin","Conseils personnalisés basés sur votre profil","Calcul des coûts selon votre région"],ct=R()(q((t,n)=>({shoppingList:null,suggestions:[],advice:[],budgetEstimation:null,generationMode:"user_only",selectedMealPlanId:null,isGenerating:!1,simulatedProgressPercentage:0,currentLoadingTitle:"",currentLoadingSubtitle:"",progressInterval:null,setGenerationMode:e=>t({generationMode:e}),setSelectedMealPlanId:e=>t({selectedMealPlanId:e}),startSimulatedProgress:()=>{const e=n();e.progressInterval&&clearInterval(e.progressInterval),t({simulatedProgressPercentage:0,currentLoadingTitle:G[0],currentLoadingSubtitle:$[0]});let r=0;const o=3e4/G.length,l=95/G.length,i=setInterval(()=>{n();const c=Math.min(95,(r+1)*l);t({simulatedProgressPercentage:c,currentLoadingTitle:G[r]||G[G.length-1],currentLoadingSubtitle:$[r]||$[$.length-1]}),r++,r>=G.length&&(r=G.length-1)},o);t({progressInterval:i})},stopSimulatedProgress:()=>{const e=n();e.progressInterval&&(clearInterval(e.progressInterval),t({progressInterval:null,simulatedProgressPercentage:100,currentLoadingTitle:"Liste générée avec succès !",currentLoadingSubtitle:"Votre liste de courses personnalisée est prête"}))},generateShoppingList:async e=>{const{generationMode:r,selectedMealPlanId:s}=e;a.info("SHOPPING_LIST_STORE","Starting shopping list generation",{generationMode:r,selectedMealPlanId:s});try{t({isGenerating:!0}),n().startSimulatedProgress();const{data:{user:o}}=await y.auth.getUser();if(!o)throw a.error("Cannot generate shopping list: user not authenticated"),new Error("User not authenticated");a.info("Starting shopping list generation",{mealPlanId:s,generationMode:r,userId:o.id}),a.debug("Calling shopping-list-generator edge function");const{data:l,error:i}=await y.functions.invoke("shopping-list-generator",{body:{user_id:o.id,meal_plan_id:s,generation_mode:r}});if(i)throw a.error("Shopping list generation API error",i),a.error("SHOPPING_LIST_STORE","Edge function error",{error:i}),i;if(!l||!l.shopping_list)throw a.error("SHOPPING_LIST_STORE","Invalid response from edge function",{data:l}),new Error("Invalid response from shopping list generator");a.info("Shopping list generation API response received",{hasShoppingList:!!l.shopping_list,hasSuggestions:!!l.suggestions,hasAdvice:!!l.advice,hasBudgetEstimation:!!l.budget_estimation});const c=(l.shopping_list||[]).map(p=>({id:p.id||`category-${Date.now()}-${Math.random()}`,name:p.category||p.name||"Unknown Category",icon:p.icon||"Package",color:p.color||"#6B7280",estimatedTotal:p.estimatedTotal||0,items:(p.items||[]).map(d=>({id:d.id||`item-${Date.now()}-${Math.random()}`,name:d.name||"Unknown Item",quantity:d.quantity||"1",estimatedPrice:d.estimatedPrice||0,priority:d.priority||"medium",isChecked:!1}))})),u=c.reduce((p,d)=>p+d.items.length,0);a.info("SHOPPING_LIST_STORE","Successfully generated shopping list",{categoriesCount:c.length,itemCount:u,suggestionsCount:l.suggestions?.length||0,adviceCount:l.advice?.length||0,hasBudget:!!l.budget_estimation}),c.forEach((p,d)=>{a.debug("SHOPPING_LIST_STORE",`Category ${d+1}: ${p.name}`,{itemsCount:p.items.length,items:p.items.map(S=>`${S.name} (${S.quantity})`)})});const g={id:l.shopping_list?.id||`list-${Date.now()}`,name:l.shopping_list?.name||"Liste de Courses",generationMode:r,totalItems:u,completedItems:0,totalEstimatedCost:l.shopping_list?.totalEstimatedCost||0,categories:c,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};n().stopSimulatedProgress(),t({shoppingList:g,suggestions:l.suggestions||[],advice:l.advice||[],budgetEstimation:l.budget_estimation||null,isGenerating:!1}),a.info("Shopping list generation completed successfully",{itemsCount:u,suggestionsCount:l.suggestions?.length||0,adviceCount:l.advice?.length||0})}catch(o){throw a.error("Shopping list generation failed",o),a.error("SHOPPING_LIST_STORE","Failed to generate shopping list",{error:o}),n().stopSimulatedProgress(),t({isGenerating:!1,simulatedProgressPercentage:0}),o}},reset:()=>{const e=n();e.progressInterval&&clearInterval(e.progressInterval),t({shoppingList:null,suggestions:[],advice:[],budgetEstimation:null,selectedMealPlanId:null,isGenerating:!1,simulatedProgressPercentage:0,currentLoadingTitle:"",currentLoadingSubtitle:"",progressInterval:null})}}),{name:"shopping-list-store",partialize:t=>({shoppingList:t.shoppingList,suggestions:t.suggestions,advice:t.advice,budgetEstimation:t.budgetEstimation,generationMode:t.generationMode,selectedMealPlanId:t.selectedMealPlanId})})),$e=[{title:"Initialisation du scan",subtitle:"Configuration des algorithmes d'analyse corporelle"},{title:"Sécurisation des photos",subtitle:"Protection et optimisation des images"},{title:"Nettoyage intelligent",subtitle:"Amélioration automatique de la qualité"},{title:"Détection silhouette",subtitle:"Identification de 24 points anatomiques"},{title:"Estimation des mesures",subtitle:"Calcul précis des dimensions corporelles"},{title:"Analyse de la peau",subtitle:"Extraction des propriétés chromatiques"},{title:"Profil morphologique",subtitle:"Classification selon 300+ archétypes"},{title:"Sélection d'archétypes",subtitle:"Recherche des correspondances optimales"},{title:"Affinage IA",subtitle:"Personnalisation par intelligence artificielle"},{title:"Contrôles de cohérence",subtitle:"Validation des paramètres calculés"},{title:"Préparation du modèle 3D",subtitle:"Initialisation du mesh corporel"},{title:"Application des morphs",subtitle:"Déformation géométrique personnalisée"},{title:"Répartition des masses",subtitle:"Calcul des proportions anatomiques"},{title:"Peau & matériaux",subtitle:"Application des propriétés visuelles"},{title:"Mise en scène",subtitle:"Optimisation de la présentation 3D"},{title:"Validation finale",subtitle:"Contrôle qualité automatisé"},{title:"Avatar prêt",subtitle:"Rendu 3D disponible pour interaction"}],ze=[{title:"Initialisation du scan facial",subtitle:"Configuration des algorithmes d'analyse"},{title:"Sécurisation des photos faciales",subtitle:"Protection et optimisation des données"},{title:"Nettoyage intelligent du visage",subtitle:"Amélioration automatique de la qualité"},{title:"Détection des traits faciaux",subtitle:"Cartographie de 68 points de référence"},{title:"Analyse sémantique faciale",subtitle:"Classification morphologique avancée"},{title:"Sélection d'archétypes faciaux",subtitle:"Recherche dans la base de données"},{title:"Affinage IA du visage",subtitle:"Personnalisation par intelligence artificielle"},{title:"Contrôles de cohérence faciale",subtitle:"Validation des paramètres calculés"},{title:"Préparation du modèle 3D facial",subtitle:"Initialisation du mesh de base"},{title:"Application des morphs faciaux",subtitle:"Déformation géométrique personnalisée"},{title:"Peau & matériaux faciaux",subtitle:"Application des propriétés visuelles"},{title:"Mise en scène faciale",subtitle:"Optimisation de la présentation 3D"},{title:"Validation finale du visage",subtitle:"Contrôle qualité automatisé"},{title:"Avatar facial prêt",subtitle:"Rendu 3D disponible pour interaction"}],le={front_taken:25,profile_taken:50,done:50},ce={upload:{progress:55,message:"Analyse IA Avancée",subMessage:"Téléchargement des photos..."},estimate:{progress:65,message:"Analyse IA Avancée",subMessage:"Extraction des mesures corporelles..."},semantic:{progress:75,message:"Analyse IA Avancée",subMessage:"Classification morphologique..."},match:{progress:85,message:"Analyse IA Avancée",subMessage:"Sélection des archétypes..."},commit:{progress:90,message:"Analyse IA Avancée",subMessage:"Sauvegarde des données..."},model_loading:{progress:92,message:"Chargement de votre avatar",subMessage:"Téléchargement du modèle 3D..."},model_loaded:{progress:94,message:"Chargement de votre avatar",subMessage:"Modèle 3D chargé avec succès..."},morphs_applied:{progress:97,message:"Chargement de votre avatar",subMessage:"Application des paramètres morphologiques..."},first_frame_rendered:{progress:100,message:"Avatar 3D Prêt",subMessage:"Votre reflet numérique est maintenant visible"}},dt=R((t,n)=>({isActive:!1,clientScanId:null,serverScanId:null,currentStep:"capture",overallProgress:0,phaseProgress:0,message:"",subMessage:"",steps:[],totalSteps:0,flowType:null,progressHistory:[],dynamicProgressIntervalId:null,dynamicProgressStepIndex:0,lastSoundThreshold:-1,startProgress:(e,r,s)=>{if(!r||typeof r!="string"){a.error("startProgress called without valid clientScanId",{clientScanId:r});return}const o=n();if(o.isActive&&o.clientScanId===r)return;o.isActive&&o.clientScanId&&o.clientScanId!==r&&a.error("Starting new progress while another is active",{activeScanId:o.clientScanId,newScanId:r});const l=Date.now();t({isActive:!0,clientScanId:r,serverScanId:null,steps:e,totalSteps:e.length,currentStep:"capture",overallProgress:0,phaseProgress:0,message:e[0]?.subtitle||"",subMessage:"",lastUpdateTime:l,flowType:s,progressHistory:[{step:e[0]?.id||"",progress:0,timestamp:l}],lastSoundThreshold:-1}),a.info("Progress started",{clientScanId:r,steps:e.length})},setCaptureProgress:e=>{const r=n();if(!r.isActive){a.warn("setCaptureProgress called but progress not active",{step:e});return}const s=le[e];if(s===void 0){a.error("Invalid capture step",{step:e,validSteps:Object.keys(le)});return}if(s<r.overallProgress){a.debug("Rejected non-monotonic capture progress",{targetProgress:s,step:e,reason:"progress_would_decrease"});return}const o=Date.now(),l={step:"capture",progress:s,timestamp:o},i=[...r.progressHistory,l].slice(-20);t({currentStep:"capture",overallProgress:s,phaseProgress:s,message:"Capture Photographique",subMessage:e==="front_taken"?"Capturez votre photo de profil - tournez-vous à 90°":"Photos capturées avec succès - Prêt pour l'analyse IA",lastUpdateTime:o,progressHistory:i}),a.info(`Capture progress: ${s}%`,{step:e,progress:s,timestamp:new Date().toISOString()})},setProcessingStep:e=>{const r=n();if(r.dynamicProgressIntervalId!==null)return;const s=ce[e];if(!s){a.error("Invalid processing step",{step:e,validSteps:Object.keys(ce)});return}if(s.progress<r.overallProgress)return;const o=Date.now(),l={step:e,progress:s.progress,timestamp:o},i=[...r.progressHistory,l].slice(-20);t({currentStep:"processing",overallProgress:s.progress,phaseProgress:s.progress,message:s.message,subMessage:s.subMessage,lastUpdateTime:o,progressHistory:i}),a.info("Processing step",{step:e,progress:s.progress})},setComplete:()=>{const e=n();if(!e.isActive){a.warn("setComplete called but progress not active");return}n().stopDynamicProcessing();const r=Date.now();t({currentStep:"celebration",overallProgress:95,phaseProgress:95,message:"Données Traitées",subMessage:"Préparation du rendu 3D...",lastUpdateTime:r}),a.info("Processing completed - celebration step",{serverScanId:e.serverScanId,step:"celebration",progress:95,timestamp:new Date().toISOString()})},setRendering:()=>{const e=n();if(!e.isActive){a.warn("setRendering called but progress not active");return}const r=Date.now();t({currentStep:"avatar",overallProgress:98,phaseProgress:98,message:"Chargement de votre avatar",subMessage:"Préparation du conteneur 3D...",lastUpdateTime:r}),a.info("Avatar rendering started",{serverScanId:e.serverScanId,step:"avatar",progress:98,timestamp:new Date().toISOString()})},setRenderReady:()=>{const e=n();if(!e.isActive){a.warn("setRenderReady called but progress not active");return}n().stopDynamicProcessing();const r=Date.now();t({currentStep:"avatar",overallProgress:100,phaseProgress:100,message:"Avatar 3D Prêt",subMessage:"Votre reflet numérique est maintenant visible",lastUpdateTime:r}),a.info("Avatar render ready - 100% complete",{serverScanId:e.serverScanId,step:"avatar",progress:100,timestamp:new Date().toISOString()})},setServerScanId:e=>{n(),t({serverScanId:e}),a.info("Server scan ID set",{serverScanId:e,timestamp:new Date().toISOString()})},setProgressMessage:(e,r)=>{t({message:e,subMessage:r||"",lastUpdateTime:Date.now()})},completeProgress:()=>{const e=n();n().setComplete(),a.info("Progress completed successfully",{serverScanId:e.serverScanId,finalStep:"celebration",timestamp:new Date().toISOString()})},maintainProgressForReview:()=>{const e=n(),r=Date.now();a.info("Maintaining progress for review",{serverScanId:e.serverScanId,currentProgress:e.overallProgress,currentStep:e.currentStep,timestamp:new Date().toISOString()});const s=e.steps.length>0?e.steps:[{id:"capture",title:"Capture Photographique",subtitle:"Photos de face et de profil capturées",icon:"Camera",color:"#8B5CF6"},{id:"processing",title:"Analyse IA Avancée",subtitle:"Intelligence artificielle appliquée",icon:"Scan",color:"#8B5CF6"},{id:"celebration",title:"Données Traitées",subtitle:"Préparation du rendu 3D",icon:"Check",color:"#8B5CF6"},{id:"avatar",title:"Avatar 3D",subtitle:"Votre reflet numérique",icon:"Eye",color:"#8B5CF6"}];t({overallProgress:95,phaseProgress:95,currentStep:"celebration",message:"Données Traitées",subMessage:"Préparation du rendu 3D...",lastUpdateTime:r,steps:s})},resetProgress:()=>{const e=n();n().stopDynamicProcessing(),a.info("Resetting progress",{serverScanId:e.serverScanId,timestamp:new Date().toISOString()}),t({isActive:!1,clientScanId:null,serverScanId:null,currentStep:"capture",overallProgress:0,phaseProgress:0,message:"",subMessage:"",steps:[],totalSteps:0,flowType:null,progressHistory:[],dynamicProgressIntervalId:null,dynamicProgressStepIndex:0,lastSoundThreshold:-1})},setProgressActive:e=>{const r=n();a.info("Setting progress active",{active:e,serverScanId:r.serverScanId,timestamp:new Date().toISOString()}),t({isActive:e})},startDynamicProcessing:(e,r)=>{const s=n();n().stopDynamicProcessing();const o=s.flowType==="face"?ze:$e;a.info("Starting dynamic processing progression",{startPercentage:e,endPercentage:r,flowType:s.flowType});const i=(r-e)/o.length,c=o[0];t({currentStep:"processing",overallProgress:e,phaseProgress:e,message:c.title,subMessage:c.subtitle,dynamicProgressStepIndex:0,lastUpdateTime:Date.now()}),n();const u=window.setInterval(()=>{const p=n().dynamicProgressStepIndex+1;if(p>=o.length){n().stopDynamicProcessing(),t({overallProgress:r,phaseProgress:r,message:"Analyse IA Terminée",subMessage:"Finalisation des données...",lastUpdateTime:Date.now()}),n(),a.info("Dynamic processing completed",{finalProgress:r});return}const d=o[p],S=Math.min(r,e+i*(p+1));t({overallProgress:S,phaseProgress:S,message:d.title,subMessage:d.subtitle,dynamicProgressStepIndex:p,lastUpdateTime:Date.now()}),n(),a.info("Dynamic processing step update",{stepIndex:p,stepTitle:d.title,progress:S})},3e3);t({dynamicProgressIntervalId:u}),n()},stopDynamicProcessing:()=>{const e=n();e.dynamicProgressIntervalId!==null&&(window.clearInterval(e.dynamicProgressIntervalId),a.info("Dynamic processing stopped",{lastStepIndex:e.dynamicProgressStepIndex}),t({dynamicProgressIntervalId:null,dynamicProgressStepIndex:0}),n())},setOverallProgress:(e,r,s)=>{const o=n();if(!o.isActive){a.warn("setOverallProgress called but progress not active",{percentage:e,message:r});return}if(o.dynamicProgressIntervalId!==null)return;const l=Number.isFinite(e)&&!Number.isNaN(e)?Math.max(0,Math.min(100,e)):0;if((!Number.isFinite(e)||Number.isNaN(e))&&a.warn("Invalid percentage passed to setOverallProgress, defaulting to 0",{percentageType:typeof e,safePercentage:l,message:r}),l<o.overallProgress){a.debug("REJECTED non-monotonic progress update",{message:r,reason:"progress_would_decrease"});return}const i=Math.floor(l/4);if(i>o.lastSoundThreshold&&l>0){try{typeof ie=="function"&&(ie(500,50),a.debug("Progress audio feedback played",{percentage:l,threshold:i,lastThreshold:o.lastSoundThreshold}))}catch(p){a.warn("Progress audio feedback failed",{error:p instanceof Error?p.message:String(p),percentage:l})}t({lastSoundThreshold:i})}const c=Date.now(),u={step:"custom",progress:l,timestamp:c},g=[...o.progressHistory,u].slice(-20);t({overallProgress:l,phaseProgress:l,message:r||o.message,subMessage:s||o.subMessage,lastUpdateTime:c,progressHistory:g}),a.info(`Overall progress: ${l}%`,{message:r,subMessage:s,timestamp:new Date().toISOString()})},incrementProgress:(e,r,s)=>{const o=n();if(!o.isActive){a.warn("incrementProgress called but progress not active",{increment:e,message:r});return}const l=Math.min(100,o.overallProgress+e);n().setOverallProgress(l,r||o.message,s||o.subMessage)}}));export{A as F,nt as Z,tt as a,re as b,C as c,Re as d,ct as e,rt as f,Ze as g,at as h,it as i,st as j,et as k,ot as l,dt as m,lt as u};
